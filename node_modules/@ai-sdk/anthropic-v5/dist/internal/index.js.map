{"version":3,"sources":["../../src/internal/index.ts","../../src/anthropic-messages-language-model.ts","../../src/anthropic-error.ts","../../src/anthropic-messages-api.ts","../../src/anthropic-messages-options.ts","../../src/anthropic-prepare-tools.ts","../../src/get-cache-control.ts","../../src/tool/text-editor_20250728.ts","../../src/tool/web-search_20250305.ts","../../src/tool/web-fetch-20250910.ts","../../src/convert-to-anthropic-messages-prompt.ts","../../src/tool/code-execution_20250522.ts","../../src/tool/code-execution_20250825.ts","../../src/map-anthropic-stop-reason.ts","../../src/tool/bash_20241022.ts","../../src/tool/bash_20250124.ts","../../src/tool/computer_20241022.ts","../../src/tool/computer_20250124.ts","../../src/tool/memory_20250818.ts","../../src/tool/text-editor_20241022.ts","../../src/tool/text-editor_20250124.ts","../../src/tool/text-editor_20250429.ts","../../src/anthropic-tools.ts"],"sourcesContent":["export { AnthropicMessagesLanguageModel } from '../anthropic-messages-language-model';\nexport { anthropicTools } from '../anthropic-tools';\nexport type { AnthropicMessagesModelId } from '../anthropic-messages-options';\nexport { prepareTools } from '../anthropic-prepare-tools';\n","import {\n  JSONObject,\n  LanguageModelV2,\n  LanguageModelV2CallWarning,\n  LanguageModelV2Content,\n  LanguageModelV2FinishReason,\n  LanguageModelV2FunctionTool,\n  LanguageModelV2Prompt,\n  LanguageModelV2Source,\n  LanguageModelV2StreamPart,\n  LanguageModelV2Usage,\n  SharedV2ProviderMetadata,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport {\n  combineHeaders,\n  createEventSourceResponseHandler,\n  createJsonResponseHandler,\n  FetchFunction,\n  generateId,\n  InferValidator,\n  parseProviderOptions,\n  ParseResult,\n  postJsonToApi,\n  Resolvable,\n  resolve,\n} from '@ai-sdk/provider-utils';\nimport { anthropicFailedResponseHandler } from './anthropic-error';\nimport {\n  AnthropicContainer,\n  anthropicMessagesChunkSchema,\n  anthropicMessagesResponseSchema,\n  AnthropicReasoningMetadata,\n  Citation,\n} from './anthropic-messages-api';\nimport {\n  AnthropicMessagesModelId,\n  anthropicProviderOptions,\n} from './anthropic-messages-options';\nimport { prepareTools } from './anthropic-prepare-tools';\nimport { convertToAnthropicMessagesPrompt } from './convert-to-anthropic-messages-prompt';\nimport { CacheControlValidator } from './get-cache-control';\nimport { mapAnthropicStopReason } from './map-anthropic-stop-reason';\n\nfunction createCitationSource(\n  citation: Citation,\n  citationDocuments: Array<{\n    title: string;\n    filename?: string;\n    mediaType: string;\n  }>,\n  generateId: () => string,\n): LanguageModelV2Source | undefined {\n  if (citation.type !== 'page_location' && citation.type !== 'char_location') {\n    return;\n  }\n\n  const documentInfo = citationDocuments[citation.document_index];\n\n  if (!documentInfo) {\n    return;\n  }\n\n  return {\n    type: 'source' as const,\n    sourceType: 'document' as const,\n    id: generateId(),\n    mediaType: documentInfo.mediaType,\n    title: citation.document_title ?? documentInfo.title,\n    filename: documentInfo.filename,\n    providerMetadata: {\n      anthropic:\n        citation.type === 'page_location'\n          ? {\n              citedText: citation.cited_text,\n              startPageNumber: citation.start_page_number,\n              endPageNumber: citation.end_page_number,\n            }\n          : {\n              citedText: citation.cited_text,\n              startCharIndex: citation.start_char_index,\n              endCharIndex: citation.end_char_index,\n            },\n    } satisfies SharedV2ProviderMetadata,\n  };\n}\n\ntype AnthropicMessagesConfig = {\n  provider: string;\n  baseURL: string;\n  headers: Resolvable<Record<string, string | undefined>>;\n  fetch?: FetchFunction;\n  buildRequestUrl?: (baseURL: string, isStreaming: boolean) => string;\n  transformRequestBody?: (args: Record<string, any>) => Record<string, any>;\n  supportedUrls?: () => LanguageModelV2['supportedUrls'];\n  generateId?: () => string;\n};\n\nexport class AnthropicMessagesLanguageModel implements LanguageModelV2 {\n  readonly specificationVersion = 'v2';\n\n  readonly modelId: AnthropicMessagesModelId;\n\n  private readonly config: AnthropicMessagesConfig;\n  private readonly generateId: () => string;\n\n  constructor(\n    modelId: AnthropicMessagesModelId,\n    config: AnthropicMessagesConfig,\n  ) {\n    this.modelId = modelId;\n    this.config = config;\n    this.generateId = config.generateId ?? generateId;\n  }\n\n  supportsUrl(url: URL): boolean {\n    return url.protocol === 'https:';\n  }\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  get supportedUrls() {\n    return this.config.supportedUrls?.() ?? {};\n  }\n\n  private async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions,\n  }: Parameters<LanguageModelV2['doGenerate']>[0]) {\n    const warnings: LanguageModelV2CallWarning[] = [];\n\n    if (frequencyPenalty != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'frequencyPenalty',\n      });\n    }\n\n    if (presencePenalty != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'presencePenalty',\n      });\n    }\n\n    if (seed != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'seed',\n      });\n    }\n\n    if (responseFormat?.type === 'json') {\n      if (responseFormat.schema == null) {\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'responseFormat',\n          details:\n            'JSON response format requires a schema. ' +\n            'The response format is ignored.',\n        });\n      } else if (tools != null) {\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'tools',\n          details:\n            'JSON response format does not support tools. ' +\n            'The provided tools are ignored.',\n        });\n      }\n    }\n\n    const jsonResponseTool: LanguageModelV2FunctionTool | undefined =\n      responseFormat?.type === 'json' && responseFormat.schema != null\n        ? {\n            type: 'function',\n            name: 'json',\n            description: 'Respond with a JSON object.',\n            inputSchema: responseFormat.schema,\n          }\n        : undefined;\n\n    const anthropicOptions = await parseProviderOptions({\n      provider: 'anthropic',\n      providerOptions,\n      schema: anthropicProviderOptions,\n    });\n\n    // Create a shared cache control validator to track breakpoints across tools and messages\n    const cacheControlValidator = new CacheControlValidator();\n\n    const { prompt: messagesPrompt, betas } =\n      await convertToAnthropicMessagesPrompt({\n        prompt,\n        sendReasoning: anthropicOptions?.sendReasoning ?? true,\n        warnings,\n        cacheControlValidator,\n      });\n\n    const isThinking = anthropicOptions?.thinking?.type === 'enabled';\n    const thinkingBudget = anthropicOptions?.thinking?.budgetTokens;\n\n    const maxOutputTokensForModel = getMaxOutputTokensForModel(this.modelId);\n    const maxTokens = maxOutputTokens ?? maxOutputTokensForModel;\n\n    const baseArgs = {\n      // model id:\n      model: this.modelId,\n\n      // standardized settings:\n      max_tokens: maxTokens,\n      temperature,\n      top_k: topK,\n      top_p: topP,\n      stop_sequences: stopSequences,\n\n      // provider specific settings:\n      ...(isThinking && {\n        thinking: { type: 'enabled', budget_tokens: thinkingBudget },\n      }),\n\n      // container with agent skills:\n      ...(anthropicOptions?.container && {\n        container: {\n          id: anthropicOptions.container.id,\n          skills: anthropicOptions.container.skills?.map(skill => ({\n            type: skill.type,\n            skill_id: skill.skillId,\n            version: skill.version,\n          })),\n        } satisfies AnthropicContainer,\n      }),\n\n      // prompt:\n      system: messagesPrompt.system,\n      messages: messagesPrompt.messages,\n    };\n\n    if (isThinking) {\n      if (thinkingBudget == null) {\n        throw new UnsupportedFunctionalityError({\n          functionality: 'thinking requires a budget',\n        });\n      }\n\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'temperature',\n          details: 'temperature is not supported when thinking is enabled',\n        });\n      }\n\n      if (topK != null) {\n        baseArgs.top_k = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'topK',\n          details: 'topK is not supported when thinking is enabled',\n        });\n      }\n\n      if (topP != null) {\n        baseArgs.top_p = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'topP',\n          details: 'topP is not supported when thinking is enabled',\n        });\n      }\n\n      // adjust max tokens to account for thinking:\n      baseArgs.max_tokens = maxTokens + thinkingBudget;\n    }\n\n    // limit to max output tokens for model to enable model switching without breakages:\n    if (baseArgs.max_tokens > maxOutputTokensForModel) {\n      // only warn if max output tokens is provided as input:\n      if (maxOutputTokens != null) {\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'maxOutputTokens',\n          details:\n            `${baseArgs.max_tokens} (maxOutputTokens + thinkingBudget) is greater than ${this.modelId} ${maxOutputTokensForModel} max output tokens. ` +\n            `The max output tokens have been limited to ${maxOutputTokensForModel}.`,\n        });\n      }\n      baseArgs.max_tokens = maxOutputTokensForModel;\n    }\n\n    if (\n      anthropicOptions?.container &&\n      anthropicOptions.container.skills &&\n      anthropicOptions.container.skills.length > 0\n    ) {\n      betas.add('code-execution-2025-08-25');\n      betas.add('skills-2025-10-02');\n      betas.add('files-api-2025-04-14');\n\n      if (\n        !tools?.some(\n          tool =>\n            tool.type === 'provider-defined' &&\n            tool.id === 'anthropic.code_execution_20250825',\n        )\n      ) {\n        warnings.push({\n          type: 'other',\n          message: 'code execution tool is required when using skills',\n        });\n      }\n    }\n\n    const {\n      tools: anthropicTools,\n      toolChoice: anthropicToolChoice,\n      toolWarnings,\n      betas: toolsBetas,\n    } = await prepareTools(\n      jsonResponseTool != null\n        ? {\n            tools: [jsonResponseTool],\n            toolChoice: { type: 'tool', toolName: jsonResponseTool.name },\n            disableParallelToolUse: true,\n            cacheControlValidator,\n          }\n        : {\n            tools: tools ?? [],\n            toolChoice,\n            disableParallelToolUse: anthropicOptions?.disableParallelToolUse,\n            cacheControlValidator,\n          },\n    );\n\n    // Extract cache control warnings once at the end\n    const cacheWarnings = cacheControlValidator.getWarnings();\n\n    return {\n      args: {\n        ...baseArgs,\n        tools: anthropicTools,\n        tool_choice: anthropicToolChoice,\n      },\n      warnings: [...warnings, ...toolWarnings, ...cacheWarnings],\n      betas: new Set([...betas, ...toolsBetas]),\n      usesJsonResponseTool: jsonResponseTool != null,\n    };\n  }\n\n  private async getHeaders({\n    betas,\n    headers,\n  }: {\n    betas: Set<string>;\n    headers: Record<string, string | undefined> | undefined;\n  }) {\n    return combineHeaders(\n      await resolve(this.config.headers),\n      betas.size > 0 ? { 'anthropic-beta': Array.from(betas).join(',') } : {},\n      headers,\n    );\n  }\n\n  private buildRequestUrl(isStreaming: boolean): string {\n    return (\n      this.config.buildRequestUrl?.(this.config.baseURL, isStreaming) ??\n      `${this.config.baseURL}/messages`\n    );\n  }\n\n  private transformRequestBody(args: Record<string, any>): Record<string, any> {\n    return this.config.transformRequestBody?.(args) ?? args;\n  }\n\n  private extractCitationDocuments(prompt: LanguageModelV2Prompt): Array<{\n    title: string;\n    filename?: string;\n    mediaType: string;\n  }> {\n    const isCitationPart = (part: {\n      type: string;\n      mediaType?: string;\n      providerOptions?: { anthropic?: { citations?: { enabled?: boolean } } };\n    }) => {\n      if (part.type !== 'file') {\n        return false;\n      }\n\n      if (\n        part.mediaType !== 'application/pdf' &&\n        part.mediaType !== 'text/plain'\n      ) {\n        return false;\n      }\n\n      const anthropic = part.providerOptions?.anthropic;\n      const citationsConfig = anthropic?.citations as\n        | { enabled?: boolean }\n        | undefined;\n      return citationsConfig?.enabled ?? false;\n    };\n\n    return prompt\n      .filter(message => message.role === 'user')\n      .flatMap(message => message.content)\n      .filter(isCitationPart)\n      .map(part => {\n        // TypeScript knows this is a file part due to our filter\n        const filePart = part as Extract<typeof part, { type: 'file' }>;\n        return {\n          title: filePart.filename ?? 'Untitled Document',\n          filename: filePart.filename,\n          mediaType: filePart.mediaType,\n        };\n      });\n  }\n\n  async doGenerate(\n    options: Parameters<LanguageModelV2['doGenerate']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doGenerate']>>> {\n    const { args, warnings, betas, usesJsonResponseTool } =\n      await this.getArgs(options);\n\n    // Extract citation documents for response processing\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse,\n    } = await postJsonToApi({\n      url: this.buildRequestUrl(false),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(args),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(\n        anthropicMessagesResponseSchema,\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    const content: Array<LanguageModelV2Content> = [];\n\n    // map response content to content array\n    for (const part of response.content) {\n      switch (part.type) {\n        case 'text': {\n          // when a json response tool is used, the tool call is returned as text,\n          // so we ignore the text content:\n          if (!usesJsonResponseTool) {\n            content.push({ type: 'text', text: part.text });\n\n            // Process citations if present\n            if (part.citations) {\n              for (const citation of part.citations) {\n                const source = createCitationSource(\n                  citation,\n                  citationDocuments,\n                  this.generateId,\n                );\n\n                if (source) {\n                  content.push(source);\n                }\n              }\n            }\n          }\n          break;\n        }\n        case 'thinking': {\n          content.push({\n            type: 'reasoning',\n            text: part.thinking,\n            providerMetadata: {\n              anthropic: {\n                signature: part.signature,\n              } satisfies AnthropicReasoningMetadata,\n            },\n          });\n          break;\n        }\n        case 'redacted_thinking': {\n          content.push({\n            type: 'reasoning',\n            text: '',\n            providerMetadata: {\n              anthropic: {\n                redactedData: part.data,\n              } satisfies AnthropicReasoningMetadata,\n            },\n          });\n          break;\n        }\n        case 'tool_use': {\n          content.push(\n            // when a json response tool is used, the tool call becomes the text:\n            usesJsonResponseTool\n              ? {\n                  type: 'text',\n                  text: JSON.stringify(part.input),\n                }\n              : {\n                  type: 'tool-call',\n                  toolCallId: part.id,\n                  toolName: part.name,\n                  input: JSON.stringify(part.input),\n                },\n          );\n\n          break;\n        }\n        case 'server_tool_use': {\n          // code execution 20250825 needs mapping:\n          if (\n            part.name === 'text_editor_code_execution' ||\n            part.name === 'bash_code_execution'\n          ) {\n            content.push({\n              type: 'tool-call',\n              toolCallId: part.id,\n              toolName: 'code_execution',\n              input: JSON.stringify({ type: part.name, ...part.input }),\n              providerExecuted: true,\n            });\n          } else if (\n            part.name === 'web_search' ||\n            part.name === 'code_execution' ||\n            part.name === 'web_fetch'\n          ) {\n            content.push({\n              type: 'tool-call',\n              toolCallId: part.id,\n              toolName: part.name,\n              input: JSON.stringify(part.input),\n              providerExecuted: true,\n            });\n          }\n\n          break;\n        }\n        case 'web_fetch_tool_result': {\n          if (part.content.type === 'web_fetch_result') {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'web_fetch',\n              result: {\n                type: 'web_fetch_result',\n                url: part.content.url,\n                retrievedAt: part.content.retrieved_at,\n                content: {\n                  type: part.content.content.type,\n                  title: part.content.content.title,\n                  citations: part.content.content.citations,\n                  source: {\n                    type: part.content.content.source.type,\n                    mediaType: part.content.content.source.media_type,\n                    data: part.content.content.source.data,\n                  },\n                },\n              },\n              providerExecuted: true,\n            });\n          } else if (part.content.type === 'web_fetch_tool_result_error') {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'web_fetch',\n              isError: true,\n              result: {\n                type: 'web_fetch_tool_result_error',\n                errorCode: part.content.error_code,\n              },\n              providerExecuted: true,\n            });\n          }\n          break;\n        }\n        case 'web_search_tool_result': {\n          if (Array.isArray(part.content)) {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'web_search',\n              result: part.content.map(result => ({\n                url: result.url,\n                title: result.title,\n                pageAge: result.page_age ?? null,\n                encryptedContent: result.encrypted_content,\n                type: result.type,\n              })),\n              providerExecuted: true,\n            });\n\n            for (const result of part.content) {\n              content.push({\n                type: 'source',\n                sourceType: 'url',\n                id: this.generateId(),\n                url: result.url,\n                title: result.title,\n                providerMetadata: {\n                  anthropic: {\n                    pageAge: result.page_age ?? null,\n                  },\n                },\n              });\n            }\n          } else {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'web_search',\n              isError: true,\n              result: {\n                type: 'web_search_tool_result_error',\n                errorCode: part.content.error_code,\n              },\n              providerExecuted: true,\n            });\n          }\n          break;\n        }\n\n        // code execution 20250522:\n        case 'code_execution_tool_result': {\n          if (part.content.type === 'code_execution_result') {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'code_execution',\n              result: {\n                type: part.content.type,\n                stdout: part.content.stdout,\n                stderr: part.content.stderr,\n                return_code: part.content.return_code,\n              },\n              providerExecuted: true,\n            });\n          } else if (part.content.type === 'code_execution_tool_result_error') {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'code_execution',\n              isError: true,\n              result: {\n                type: 'code_execution_tool_result_error',\n                errorCode: part.content.error_code,\n              },\n              providerExecuted: true,\n            });\n          }\n          break;\n        }\n\n        // code execution 20250825:\n        case 'bash_code_execution_tool_result':\n        case 'text_editor_code_execution_tool_result': {\n          content.push({\n            type: 'tool-result',\n            toolCallId: part.tool_use_id,\n            toolName: 'code_execution',\n            result: part.content,\n            providerExecuted: true,\n          });\n          break;\n        }\n      }\n    }\n\n    return {\n      content,\n      finishReason: mapAnthropicStopReason({\n        finishReason: response.stop_reason,\n        isJsonResponseFromTool: usesJsonResponseTool,\n      }),\n      usage: {\n        inputTokens: response.usage.input_tokens,\n        outputTokens: response.usage.output_tokens,\n        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n        cachedInputTokens: response.usage.cache_read_input_tokens ?? undefined,\n      },\n      request: { body: args },\n      response: {\n        id: response.id ?? undefined,\n        modelId: response.model ?? undefined,\n        headers: responseHeaders,\n        body: rawResponse,\n      },\n      warnings,\n      providerMetadata: {\n        anthropic: {\n          usage: response.usage as JSONObject,\n          cacheCreationInputTokens:\n            response.usage.cache_creation_input_tokens ?? null,\n          stopSequence: response.stop_sequence ?? null,\n        },\n      },\n    };\n  }\n\n  async doStream(\n    options: Parameters<LanguageModelV2['doStream']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doStream']>>> {\n    const { args, warnings, betas, usesJsonResponseTool } =\n      await this.getArgs(options);\n\n    // Extract citation documents for response processing\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n\n    const body = { ...args, stream: true };\n\n    const { responseHeaders, value: response } = await postJsonToApi({\n      url: this.buildRequestUrl(true),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(body),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: createEventSourceResponseHandler(\n        anthropicMessagesChunkSchema,\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    let finishReason: LanguageModelV2FinishReason = 'unknown';\n    const usage: LanguageModelV2Usage = {\n      inputTokens: undefined,\n      outputTokens: undefined,\n      totalTokens: undefined,\n    };\n\n    const contentBlocks: Record<\n      number,\n      | {\n          type: 'tool-call';\n          toolCallId: string;\n          toolName: string;\n          input: string;\n          providerExecuted?: boolean;\n          firstDelta: boolean;\n        }\n      | { type: 'text' | 'reasoning' }\n    > = {};\n\n    let rawUsage: JSONObject | undefined = undefined;\n    let cacheCreationInputTokens: number | null = null;\n    let stopSequence: string | null = null;\n\n    let blockType:\n      | 'text'\n      | 'thinking'\n      | 'tool_use'\n      | 'redacted_thinking'\n      | 'server_tool_use'\n      | 'web_fetch_tool_result'\n      | 'web_search_tool_result'\n      | 'code_execution_tool_result'\n      | 'text_editor_code_execution_tool_result'\n      | 'bash_code_execution_tool_result'\n      | undefined = undefined;\n\n    const generateId = this.generateId;\n\n    return {\n      stream: response.pipeThrough(\n        new TransformStream<\n          ParseResult<InferValidator<typeof anthropicMessagesChunkSchema>>,\n          LanguageModelV2StreamPart\n        >({\n          start(controller) {\n            controller.enqueue({ type: 'stream-start', warnings });\n          },\n\n          transform(chunk, controller) {\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: 'raw', rawValue: chunk.rawValue });\n            }\n\n            if (!chunk.success) {\n              controller.enqueue({ type: 'error', error: chunk.error });\n              return;\n            }\n\n            const value = chunk.value;\n\n            switch (value.type) {\n              case 'ping': {\n                return; // ignored\n              }\n\n              case 'content_block_start': {\n                const contentBlockType = value.content_block.type;\n\n                blockType = contentBlockType;\n\n                switch (contentBlockType) {\n                  case 'text': {\n                    contentBlocks[value.index] = { type: 'text' };\n                    controller.enqueue({\n                      type: 'text-start',\n                      id: String(value.index),\n                    });\n                    return;\n                  }\n\n                  case 'thinking': {\n                    contentBlocks[value.index] = { type: 'reasoning' };\n                    controller.enqueue({\n                      type: 'reasoning-start',\n                      id: String(value.index),\n                    });\n                    return;\n                  }\n\n                  case 'redacted_thinking': {\n                    contentBlocks[value.index] = { type: 'reasoning' };\n                    controller.enqueue({\n                      type: 'reasoning-start',\n                      id: String(value.index),\n                      providerMetadata: {\n                        anthropic: {\n                          redactedData: value.content_block.data,\n                        } satisfies AnthropicReasoningMetadata,\n                      },\n                    });\n                    return;\n                  }\n\n                  case 'tool_use': {\n                    contentBlocks[value.index] = usesJsonResponseTool\n                      ? { type: 'text' }\n                      : {\n                          type: 'tool-call',\n                          toolCallId: value.content_block.id,\n                          toolName: value.content_block.name,\n                          input: '',\n                          firstDelta: true,\n                        };\n\n                    controller.enqueue(\n                      usesJsonResponseTool\n                        ? { type: 'text-start', id: String(value.index) }\n                        : {\n                            type: 'tool-input-start',\n                            id: value.content_block.id,\n                            toolName: value.content_block.name,\n                          },\n                    );\n                    return;\n                  }\n\n                  case 'server_tool_use': {\n                    if (\n                      [\n                        'web_fetch',\n                        'web_search',\n                        // code execution 20250825:\n                        'code_execution',\n                        // code execution 20250825 text editor:\n                        'text_editor_code_execution',\n                        // code execution 20250825 bash:\n                        'bash_code_execution',\n                      ].includes(value.content_block.name)\n                    ) {\n                      contentBlocks[value.index] = {\n                        type: 'tool-call',\n                        toolCallId: value.content_block.id,\n                        toolName: value.content_block.name,\n                        input: '',\n                        providerExecuted: true,\n                        firstDelta: true,\n                      };\n\n                      // map tool names for the code execution 20250825 tool:\n                      const mappedToolName =\n                        value.content_block.name ===\n                          'text_editor_code_execution' ||\n                        value.content_block.name === 'bash_code_execution'\n                          ? 'code_execution'\n                          : value.content_block.name;\n\n                      controller.enqueue({\n                        type: 'tool-input-start',\n                        id: value.content_block.id,\n                        toolName: mappedToolName,\n                        providerExecuted: true,\n                      });\n                    }\n\n                    return;\n                  }\n\n                  case 'web_fetch_tool_result': {\n                    const part = value.content_block;\n\n                    if (part.content.type === 'web_fetch_result') {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'web_fetch',\n                        result: {\n                          type: 'web_fetch_result',\n                          url: part.content.url,\n                          retrievedAt: part.content.retrieved_at,\n                          content: {\n                            type: part.content.content.type,\n                            title: part.content.content.title,\n                            citations: part.content.content.citations,\n                            source: {\n                              type: part.content.content.source.type,\n                              mediaType: part.content.content.source.media_type,\n                              data: part.content.content.source.data,\n                            },\n                          },\n                        },\n                      });\n                    } else if (\n                      part.content.type === 'web_fetch_tool_result_error'\n                    ) {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'web_fetch',\n                        isError: true,\n                        result: {\n                          type: 'web_fetch_tool_result_error',\n                          errorCode: part.content.error_code,\n                        },\n                        providerExecuted: true,\n                      });\n                    }\n\n                    return;\n                  }\n\n                  case 'web_search_tool_result': {\n                    const part = value.content_block;\n\n                    if (Array.isArray(part.content)) {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'web_search',\n                        result: part.content.map(result => ({\n                          url: result.url,\n                          title: result.title,\n                          pageAge: result.page_age ?? null,\n                          encryptedContent: result.encrypted_content,\n                          type: result.type,\n                        })),\n                        providerExecuted: true,\n                      });\n\n                      for (const result of part.content) {\n                        controller.enqueue({\n                          type: 'source',\n                          sourceType: 'url',\n                          id: generateId(),\n                          url: result.url,\n                          title: result.title,\n                          providerMetadata: {\n                            anthropic: {\n                              pageAge: result.page_age ?? null,\n                            },\n                          },\n                        });\n                      }\n                    } else {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'web_search',\n                        isError: true,\n                        result: {\n                          type: 'web_search_tool_result_error',\n                          errorCode: part.content.error_code,\n                        },\n                        providerExecuted: true,\n                      });\n                    }\n                    return;\n                  }\n\n                  // code execution 20250522:\n                  case 'code_execution_tool_result': {\n                    const part = value.content_block;\n\n                    if (part.content.type === 'code_execution_result') {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'code_execution',\n                        result: {\n                          type: part.content.type,\n                          stdout: part.content.stdout,\n                          stderr: part.content.stderr,\n                          return_code: part.content.return_code,\n                        },\n                        providerExecuted: true,\n                      });\n                    } else if (\n                      part.content.type === 'code_execution_tool_result_error'\n                    ) {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'code_execution',\n                        isError: true,\n                        result: {\n                          type: 'code_execution_tool_result_error',\n                          errorCode: part.content.error_code,\n                        },\n                        providerExecuted: true,\n                      });\n                    }\n\n                    return;\n                  }\n\n                  // code execution 20250825:\n                  case 'bash_code_execution_tool_result':\n                  case 'text_editor_code_execution_tool_result': {\n                    const part = value.content_block;\n                    controller.enqueue({\n                      type: 'tool-result',\n                      toolCallId: part.tool_use_id,\n                      toolName: 'code_execution',\n                      result: part.content,\n                      providerExecuted: true,\n                    });\n                    return;\n                  }\n\n                  default: {\n                    const _exhaustiveCheck: never = contentBlockType;\n                    throw new Error(\n                      `Unsupported content block type: ${_exhaustiveCheck}`,\n                    );\n                  }\n                }\n              }\n\n              case 'content_block_stop': {\n                // when finishing a tool call block, send the full tool call:\n                if (contentBlocks[value.index] != null) {\n                  const contentBlock = contentBlocks[value.index];\n\n                  switch (contentBlock.type) {\n                    case 'text': {\n                      controller.enqueue({\n                        type: 'text-end',\n                        id: String(value.index),\n                      });\n                      break;\n                    }\n\n                    case 'reasoning': {\n                      controller.enqueue({\n                        type: 'reasoning-end',\n                        id: String(value.index),\n                      });\n                      break;\n                    }\n\n                    case 'tool-call':\n                      // when a json response tool is used, the tool call is returned as text,\n                      // so we ignore the tool call content:\n                      if (!usesJsonResponseTool) {\n                        controller.enqueue({\n                          type: 'tool-input-end',\n                          id: contentBlock.toolCallId,\n                        });\n\n                        // map tool names for the code execution 20250825 tool:\n                        const toolName =\n                          contentBlock.toolName ===\n                            'text_editor_code_execution' ||\n                          contentBlock.toolName === 'bash_code_execution'\n                            ? 'code_execution'\n                            : contentBlock.toolName;\n\n                        controller.enqueue({\n                          type: 'tool-call',\n                          toolCallId: contentBlock.toolCallId,\n                          toolName,\n                          input: contentBlock.input,\n                          providerExecuted: contentBlock.providerExecuted,\n                        });\n                      }\n                      break;\n                  }\n\n                  delete contentBlocks[value.index];\n                }\n\n                blockType = undefined; // reset block type\n\n                return;\n              }\n\n              case 'content_block_delta': {\n                const deltaType = value.delta.type;\n                switch (deltaType) {\n                  case 'text_delta': {\n                    // when a json response tool is used, the tool call is returned as text,\n                    // so we ignore the text content:\n                    if (usesJsonResponseTool) {\n                      return;\n                    }\n\n                    controller.enqueue({\n                      type: 'text-delta',\n                      id: String(value.index),\n                      delta: value.delta.text,\n                    });\n\n                    return;\n                  }\n\n                  case 'thinking_delta': {\n                    controller.enqueue({\n                      type: 'reasoning-delta',\n                      id: String(value.index),\n                      delta: value.delta.thinking,\n                    });\n\n                    return;\n                  }\n\n                  case 'signature_delta': {\n                    // signature are only supported on thinking blocks:\n                    if (blockType === 'thinking') {\n                      controller.enqueue({\n                        type: 'reasoning-delta',\n                        id: String(value.index),\n                        delta: '',\n                        providerMetadata: {\n                          anthropic: {\n                            signature: value.delta.signature,\n                          } satisfies AnthropicReasoningMetadata,\n                        },\n                      });\n                    }\n\n                    return;\n                  }\n\n                  case 'input_json_delta': {\n                    const contentBlock = contentBlocks[value.index];\n                    let delta = value.delta.partial_json;\n\n                    // skip empty deltas to enable replacing the first character\n                    // in the code execution 20250825 tool.\n                    if (delta.length === 0) {\n                      return;\n                    }\n\n                    if (usesJsonResponseTool) {\n                      if (contentBlock?.type !== 'text') {\n                        return;\n                      }\n\n                      controller.enqueue({\n                        type: 'text-delta',\n                        id: String(value.index),\n                        delta,\n                      });\n                    } else {\n                      if (contentBlock?.type !== 'tool-call') {\n                        return;\n                      }\n\n                      // for the code execution 20250825, we need to add\n                      // the type to the delta and change the tool name.\n                      if (\n                        contentBlock.firstDelta &&\n                        (contentBlock.toolName === 'bash_code_execution' ||\n                          contentBlock.toolName ===\n                            'text_editor_code_execution')\n                      ) {\n                        delta = `{\"type\": \"${contentBlock.toolName}\",${delta.substring(1)}`;\n                      }\n\n                      controller.enqueue({\n                        type: 'tool-input-delta',\n                        id: contentBlock.toolCallId,\n                        delta,\n                      });\n\n                      contentBlock.input += delta;\n                      contentBlock.firstDelta = false;\n                    }\n\n                    return;\n                  }\n\n                  case 'citations_delta': {\n                    const citation = value.delta.citation;\n                    const source = createCitationSource(\n                      citation,\n                      citationDocuments,\n                      generateId,\n                    );\n\n                    if (source) {\n                      controller.enqueue(source);\n                    }\n\n                    return;\n                  }\n\n                  default: {\n                    const _exhaustiveCheck: never = deltaType;\n                    throw new Error(\n                      `Unsupported delta type: ${_exhaustiveCheck}`,\n                    );\n                  }\n                }\n              }\n\n              case 'message_start': {\n                usage.inputTokens = value.message.usage.input_tokens;\n                usage.cachedInputTokens =\n                  value.message.usage.cache_read_input_tokens ?? undefined;\n\n                rawUsage = {\n                  ...(value.message.usage as JSONObject),\n                };\n\n                cacheCreationInputTokens =\n                  value.message.usage.cache_creation_input_tokens ?? null;\n\n                controller.enqueue({\n                  type: 'response-metadata',\n                  id: value.message.id ?? undefined,\n                  modelId: value.message.model ?? undefined,\n                });\n\n                return;\n              }\n\n              case 'message_delta': {\n                usage.outputTokens = value.usage.output_tokens;\n                usage.totalTokens =\n                  (usage.inputTokens ?? 0) + (value.usage.output_tokens ?? 0);\n\n                finishReason = mapAnthropicStopReason({\n                  finishReason: value.delta.stop_reason,\n                  isJsonResponseFromTool: usesJsonResponseTool,\n                });\n\n                stopSequence = value.delta.stop_sequence ?? null;\n\n                rawUsage = {\n                  ...rawUsage,\n                  ...(value.usage as JSONObject),\n                };\n\n                return;\n              }\n\n              case 'message_stop': {\n                controller.enqueue({\n                  type: 'finish',\n                  finishReason,\n                  usage,\n                  providerMetadata: {\n                    anthropic: {\n                      usage: rawUsage ?? null,\n                      cacheCreationInputTokens,\n                      stopSequence,\n                    },\n                  },\n                });\n                return;\n              }\n\n              case 'error': {\n                controller.enqueue({ type: 'error', error: value.error });\n                return;\n              }\n\n              default: {\n                const _exhaustiveCheck: never = value;\n                throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n              }\n            }\n          },\n        }),\n      ),\n      request: { body },\n      response: { headers: responseHeaders },\n    };\n  }\n}\n\n// see https://docs.claude.com/en/docs/about-claude/models/overview#model-comparison-table\nfunction getMaxOutputTokensForModel(modelId: string) {\n  if (\n    modelId.includes('claude-sonnet-4-') ||\n    modelId.includes('claude-3-7-sonnet') ||\n    modelId.includes('claude-haiku-4-5')\n  ) {\n    return 64000;\n  } else if (modelId.includes('claude-opus-4-')) {\n    return 32000;\n  } else if (modelId.includes('claude-3-5-haiku')) {\n    return 8192;\n  } else {\n    return 4096; // old models, e.g. Claude Haiku 3\n  }\n}\n","import {\n  createJsonErrorResponseHandler,\n  InferValidator,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const anthropicErrorDataSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      type: z.literal('error'),\n      error: z.object({\n        type: z.string(),\n        message: z.string(),\n      }),\n    }),\n  ),\n);\n\nexport type AnthropicErrorData = InferValidator<\n  typeof anthropicErrorDataSchema\n>;\n\nexport const anthropicFailedResponseHandler = createJsonErrorResponseHandler({\n  errorSchema: anthropicErrorDataSchema,\n  errorToMessage: data => data.error.message,\n});\n","import { JSONSchema7 } from '@ai-sdk/provider';\nimport { InferValidator, lazySchema, zodSchema } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport type AnthropicMessagesPrompt = {\n  system: Array<AnthropicTextContent> | undefined;\n  messages: AnthropicMessage[];\n};\n\nexport type AnthropicMessage = AnthropicUserMessage | AnthropicAssistantMessage;\n\nexport type AnthropicCacheControl = {\n  type: 'ephemeral';\n  ttl?: '5m' | '1h';\n};\n\nexport interface AnthropicUserMessage {\n  role: 'user';\n  content: Array<\n    | AnthropicTextContent\n    | AnthropicImageContent\n    | AnthropicDocumentContent\n    | AnthropicToolResultContent\n  >;\n}\n\nexport interface AnthropicAssistantMessage {\n  role: 'assistant';\n  content: Array<\n    | AnthropicTextContent\n    | AnthropicThinkingContent\n    | AnthropicRedactedThinkingContent\n    | AnthropicToolCallContent\n    | AnthropicServerToolUseContent\n    | AnthropicCodeExecutionToolResultContent\n    | AnthropicWebFetchToolResultContent\n    | AnthropicWebSearchToolResultContent\n    | AnthropicBashCodeExecutionToolResultContent\n    | AnthropicTextEditorCodeExecutionToolResultContent\n  >;\n}\n\nexport interface AnthropicTextContent {\n  type: 'text';\n  text: string;\n  cache_control: AnthropicCacheControl | undefined;\n}\n\nexport interface AnthropicThinkingContent {\n  type: 'thinking';\n  thinking: string;\n  signature: string;\n  // Note: thinking blocks cannot be directly cached with cache_control.\n  // They are cached implicitly when appearing in previous assistant turns.\n  cache_control?: never;\n}\n\nexport interface AnthropicRedactedThinkingContent {\n  type: 'redacted_thinking';\n  data: string;\n  // Note: redacted thinking blocks cannot be directly cached with cache_control.\n  // They are cached implicitly when appearing in previous assistant turns.\n  cache_control?: never;\n}\n\ntype AnthropicContentSource =\n  | {\n      type: 'base64';\n      media_type: string;\n      data: string;\n    }\n  | {\n      type: 'url';\n      url: string;\n    }\n  | {\n      type: 'text';\n      media_type: 'text/plain';\n      data: string;\n    };\n\nexport interface AnthropicImageContent {\n  type: 'image';\n  source: AnthropicContentSource;\n  cache_control: AnthropicCacheControl | undefined;\n}\n\nexport interface AnthropicDocumentContent {\n  type: 'document';\n  source: AnthropicContentSource;\n  title?: string;\n  context?: string;\n  citations?: { enabled: boolean };\n  cache_control: AnthropicCacheControl | undefined;\n}\n\nexport interface AnthropicToolCallContent {\n  type: 'tool_use';\n  id: string;\n  name: string;\n  input: unknown;\n  cache_control: AnthropicCacheControl | undefined;\n}\n\nexport interface AnthropicServerToolUseContent {\n  type: 'server_tool_use';\n  id: string;\n  name:\n    | 'web_fetch'\n    | 'web_search'\n    // code execution 20250522:\n    | 'code_execution'\n    // code execution 20250825:\n    | 'bash_code_execution'\n    | 'text_editor_code_execution';\n  input: unknown;\n  cache_control: AnthropicCacheControl | undefined;\n}\n\n// Nested content types for tool results (without cache_control)\n// Sub-content blocks cannot be cached directly according to Anthropic docs\ntype AnthropicNestedTextContent = Omit<\n  AnthropicTextContent,\n  'cache_control'\n> & {\n  cache_control?: never;\n};\n\ntype AnthropicNestedImageContent = Omit<\n  AnthropicImageContent,\n  'cache_control'\n> & {\n  cache_control?: never;\n};\n\ntype AnthropicNestedDocumentContent = Omit<\n  AnthropicDocumentContent,\n  'cache_control'\n> & {\n  cache_control?: never;\n};\n\nexport interface AnthropicToolResultContent {\n  type: 'tool_result';\n  tool_use_id: string;\n  content:\n    | string\n    | Array<\n        | AnthropicNestedTextContent\n        | AnthropicNestedImageContent\n        | AnthropicNestedDocumentContent\n      >;\n  is_error: boolean | undefined;\n  cache_control: AnthropicCacheControl | undefined;\n}\n\nexport interface AnthropicWebSearchToolResultContent {\n  type: 'web_search_tool_result';\n  tool_use_id: string;\n  content: Array<{\n    url: string;\n    title: string;\n    page_age: string | null;\n    encrypted_content: string;\n    type: string;\n  }>;\n  cache_control: AnthropicCacheControl | undefined;\n}\n\n// code execution results for code_execution_20250522 tool:\nexport interface AnthropicCodeExecutionToolResultContent {\n  type: 'code_execution_tool_result';\n  tool_use_id: string;\n  content: {\n    type: 'code_execution_result';\n    stdout: string;\n    stderr: string;\n    return_code: number;\n  };\n  cache_control: AnthropicCacheControl | undefined;\n}\n\n// text editor code execution results for code_execution_20250825 tool:\nexport interface AnthropicTextEditorCodeExecutionToolResultContent {\n  type: 'text_editor_code_execution_tool_result';\n  tool_use_id: string;\n  content:\n    | {\n        type: 'text_editor_code_execution_tool_result_error';\n        error_code: string;\n      }\n    | {\n        type: 'text_editor_code_execution_create_result';\n        is_file_update: boolean;\n      }\n    | {\n        type: 'text_editor_code_execution_view_result';\n        content: string;\n        file_type: string;\n        num_lines: number | null;\n        start_line: number | null;\n        total_lines: number | null;\n      }\n    | {\n        type: 'text_editor_code_execution_str_replace_result';\n        lines: string[] | null;\n        new_lines: number | null;\n        new_start: number | null;\n        old_lines: number | null;\n        old_start: number | null;\n      };\n  cache_control: AnthropicCacheControl | undefined;\n}\n\n// bash code execution results for code_execution_20250825 tool:\nexport interface AnthropicBashCodeExecutionToolResultContent {\n  type: 'bash_code_execution_tool_result';\n  tool_use_id: string;\n  content:\n    | {\n        type: 'bash_code_execution_result';\n        stdout: string;\n        stderr: string;\n        return_code: number;\n        content: {\n          type: 'bash_code_execution_output';\n          file_id: string;\n        }[];\n      }\n    | {\n        type: 'bash_code_execution_tool_result_error';\n        error_code: string;\n      };\n  cache_control: AnthropicCacheControl | undefined;\n}\n\nexport interface AnthropicWebFetchToolResultContent {\n  type: 'web_fetch_tool_result';\n  tool_use_id: string;\n  content: {\n    type: 'web_fetch_result';\n    url: string;\n    retrieved_at: string | null;\n    content: {\n      type: 'document';\n      title: string | null;\n      citations?: { enabled: boolean };\n      source:\n        | { type: 'base64'; media_type: 'application/pdf'; data: string }\n        | { type: 'text'; media_type: 'text/plain'; data: string };\n    };\n  };\n  cache_control: AnthropicCacheControl | undefined;\n}\n\nexport type AnthropicTool =\n  | {\n      name: string;\n      description: string | undefined;\n      input_schema: JSONSchema7;\n      cache_control: AnthropicCacheControl | undefined;\n    }\n  | {\n      type: 'code_execution_20250522';\n      name: string;\n      cache_control: AnthropicCacheControl | undefined;\n    }\n  | {\n      type: 'code_execution_20250825';\n      name: string;\n    }\n  | {\n      name: string;\n      type: 'computer_20250124' | 'computer_20241022';\n      display_width_px: number;\n      display_height_px: number;\n      display_number: number;\n      cache_control: AnthropicCacheControl | undefined;\n    }\n  | {\n      name: string;\n      type:\n        | 'text_editor_20250124'\n        | 'text_editor_20241022'\n        | 'text_editor_20250429';\n      cache_control: AnthropicCacheControl | undefined;\n    }\n  | {\n      name: string;\n      type: 'text_editor_20250728';\n      max_characters?: number;\n      cache_control: AnthropicCacheControl | undefined;\n    }\n  | {\n      name: string;\n      type: 'bash_20250124' | 'bash_20241022';\n      cache_control: AnthropicCacheControl | undefined;\n    }\n  | {\n      name: string;\n      type: 'memory_20250818';\n    }\n  | {\n      type: 'web_fetch_20250910';\n      name: string;\n      max_uses?: number;\n      allowed_domains?: string[];\n      blocked_domains?: string[];\n      citations?: { enabled: boolean };\n      max_content_tokens?: number;\n      cache_control: AnthropicCacheControl | undefined;\n    }\n  | {\n      type: 'web_search_20250305';\n      name: string;\n      max_uses?: number;\n      allowed_domains?: string[];\n      blocked_domains?: string[];\n      user_location?: {\n        type: 'approximate';\n        city?: string;\n        region?: string;\n        country?: string;\n        timezone?: string;\n      };\n      cache_control: AnthropicCacheControl | undefined;\n    };\n\nexport type AnthropicToolChoice =\n  | { type: 'auto' | 'any'; disable_parallel_tool_use?: boolean }\n  | { type: 'tool'; name: string; disable_parallel_tool_use?: boolean };\n\nexport type AnthropicContainer = {\n  id?: string | null;\n  skills?: Array<{\n    type: 'anthropic' | 'custom';\n    skill_id: string;\n    version?: string;\n  }> | null;\n};\n\n// limited version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nexport const anthropicMessagesResponseSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      type: z.literal('message'),\n      id: z.string().nullish(),\n      model: z.string().nullish(),\n      content: z.array(\n        z.discriminatedUnion('type', [\n          z.object({\n            type: z.literal('text'),\n            text: z.string(),\n            citations: z\n              .array(\n                z.discriminatedUnion('type', [\n                  z.object({\n                    type: z.literal('web_search_result_location'),\n                    cited_text: z.string(),\n                    url: z.string(),\n                    title: z.string(),\n                    encrypted_index: z.string(),\n                  }),\n                  z.object({\n                    type: z.literal('page_location'),\n                    cited_text: z.string(),\n                    document_index: z.number(),\n                    document_title: z.string().nullable(),\n                    start_page_number: z.number(),\n                    end_page_number: z.number(),\n                  }),\n                  z.object({\n                    type: z.literal('char_location'),\n                    cited_text: z.string(),\n                    document_index: z.number(),\n                    document_title: z.string().nullable(),\n                    start_char_index: z.number(),\n                    end_char_index: z.number(),\n                  }),\n                ]),\n              )\n              .optional(),\n          }),\n          z.object({\n            type: z.literal('thinking'),\n            thinking: z.string(),\n            signature: z.string(),\n          }),\n          z.object({\n            type: z.literal('redacted_thinking'),\n            data: z.string(),\n          }),\n          z.object({\n            type: z.literal('tool_use'),\n            id: z.string(),\n            name: z.string(),\n            input: z.unknown(),\n          }),\n          z.object({\n            type: z.literal('server_tool_use'),\n            id: z.string(),\n            name: z.string(),\n            input: z.record(z.string(), z.unknown()).nullish(),\n          }),\n          z.object({\n            type: z.literal('web_fetch_tool_result'),\n            tool_use_id: z.string(),\n            content: z.union([\n              z.object({\n                type: z.literal('web_fetch_result'),\n                url: z.string(),\n                retrieved_at: z.string(),\n                content: z.object({\n                  type: z.literal('document'),\n                  title: z.string().nullable(),\n                  citations: z.object({ enabled: z.boolean() }).optional(),\n                  source: z.object({\n                    type: z.literal('text'),\n                    media_type: z.string(),\n                    data: z.string(),\n                  }),\n                }),\n              }),\n              z.object({\n                type: z.literal('web_fetch_tool_result_error'),\n                error_code: z.string(),\n              }),\n            ]),\n          }),\n          z.object({\n            type: z.literal('web_search_tool_result'),\n            tool_use_id: z.string(),\n            content: z.union([\n              z.array(\n                z.object({\n                  type: z.literal('web_search_result'),\n                  url: z.string(),\n                  title: z.string(),\n                  encrypted_content: z.string(),\n                  page_age: z.string().nullish(),\n                }),\n              ),\n              z.object({\n                type: z.literal('web_search_tool_result_error'),\n                error_code: z.string(),\n              }),\n            ]),\n          }),\n          // code execution results for code_execution_20250522 tool:\n          z.object({\n            type: z.literal('code_execution_tool_result'),\n            tool_use_id: z.string(),\n            content: z.union([\n              z.object({\n                type: z.literal('code_execution_result'),\n                stdout: z.string(),\n                stderr: z.string(),\n                return_code: z.number(),\n              }),\n              z.object({\n                type: z.literal('code_execution_tool_result_error'),\n                error_code: z.string(),\n              }),\n            ]),\n          }),\n          // bash code execution results for code_execution_20250825 tool:\n          z.object({\n            type: z.literal('bash_code_execution_tool_result'),\n            tool_use_id: z.string(),\n            content: z.discriminatedUnion('type', [\n              z.object({\n                type: z.literal('bash_code_execution_result'),\n                content: z.array(\n                  z.object({\n                    type: z.literal('bash_code_execution_output'),\n                    file_id: z.string(),\n                  }),\n                ),\n                stdout: z.string(),\n                stderr: z.string(),\n                return_code: z.number(),\n              }),\n              z.object({\n                type: z.literal('bash_code_execution_tool_result_error'),\n                error_code: z.string(),\n              }),\n            ]),\n          }),\n          // text editor code execution results for code_execution_20250825 tool:\n          z.object({\n            type: z.literal('text_editor_code_execution_tool_result'),\n            tool_use_id: z.string(),\n            content: z.discriminatedUnion('type', [\n              z.object({\n                type: z.literal('text_editor_code_execution_tool_result_error'),\n                error_code: z.string(),\n              }),\n              z.object({\n                type: z.literal('text_editor_code_execution_view_result'),\n                content: z.string(),\n                file_type: z.string(),\n                num_lines: z.number().nullable(),\n                start_line: z.number().nullable(),\n                total_lines: z.number().nullable(),\n              }),\n              z.object({\n                type: z.literal('text_editor_code_execution_create_result'),\n                is_file_update: z.boolean(),\n              }),\n              z.object({\n                type: z.literal(\n                  'text_editor_code_execution_str_replace_result',\n                ),\n                lines: z.array(z.string()).nullable(),\n                new_lines: z.number().nullable(),\n                new_start: z.number().nullable(),\n                old_lines: z.number().nullable(),\n                old_start: z.number().nullable(),\n              }),\n            ]),\n          }),\n        ]),\n      ),\n      stop_reason: z.string().nullish(),\n      stop_sequence: z.string().nullish(),\n      usage: z.looseObject({\n        input_tokens: z.number(),\n        output_tokens: z.number(),\n        cache_creation_input_tokens: z.number().nullish(),\n        cache_read_input_tokens: z.number().nullish(),\n      }),\n    }),\n  ),\n);\n\n// limited version of the schema, focused on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nexport const anthropicMessagesChunkSchema = lazySchema(() =>\n  zodSchema(\n    z.discriminatedUnion('type', [\n      z.object({\n        type: z.literal('message_start'),\n        message: z.object({\n          id: z.string().nullish(),\n          model: z.string().nullish(),\n          usage: z.looseObject({\n            input_tokens: z.number(),\n            cache_creation_input_tokens: z.number().nullish(),\n            cache_read_input_tokens: z.number().nullish(),\n          }),\n        }),\n      }),\n      z.object({\n        type: z.literal('content_block_start'),\n        index: z.number(),\n        content_block: z.discriminatedUnion('type', [\n          z.object({\n            type: z.literal('text'),\n            text: z.string(),\n          }),\n          z.object({\n            type: z.literal('thinking'),\n            thinking: z.string(),\n          }),\n          z.object({\n            type: z.literal('tool_use'),\n            id: z.string(),\n            name: z.string(),\n          }),\n          z.object({\n            type: z.literal('redacted_thinking'),\n            data: z.string(),\n          }),\n          z.object({\n            type: z.literal('server_tool_use'),\n            id: z.string(),\n            name: z.string(),\n            input: z.record(z.string(), z.unknown()).nullish(),\n          }),\n          z.object({\n            type: z.literal('web_fetch_tool_result'),\n            tool_use_id: z.string(),\n            content: z.union([\n              z.object({\n                type: z.literal('web_fetch_result'),\n                url: z.string(),\n                retrieved_at: z.string(),\n                content: z.object({\n                  type: z.literal('document'),\n                  title: z.string().nullable(),\n                  citations: z.object({ enabled: z.boolean() }).optional(),\n                  source: z.object({\n                    type: z.literal('text'),\n                    media_type: z.string(),\n                    data: z.string(),\n                  }),\n                }),\n              }),\n              z.object({\n                type: z.literal('web_fetch_tool_result_error'),\n                error_code: z.string(),\n              }),\n            ]),\n          }),\n          z.object({\n            type: z.literal('web_search_tool_result'),\n            tool_use_id: z.string(),\n            content: z.union([\n              z.array(\n                z.object({\n                  type: z.literal('web_search_result'),\n                  url: z.string(),\n                  title: z.string(),\n                  encrypted_content: z.string(),\n                  page_age: z.string().nullish(),\n                }),\n              ),\n              z.object({\n                type: z.literal('web_search_tool_result_error'),\n                error_code: z.string(),\n              }),\n            ]),\n          }),\n          // code execution results for code_execution_20250522 tool:\n          z.object({\n            type: z.literal('code_execution_tool_result'),\n            tool_use_id: z.string(),\n            content: z.union([\n              z.object({\n                type: z.literal('code_execution_result'),\n                stdout: z.string(),\n                stderr: z.string(),\n                return_code: z.number(),\n              }),\n              z.object({\n                type: z.literal('code_execution_tool_result_error'),\n                error_code: z.string(),\n              }),\n            ]),\n          }),\n          // bash code execution results for code_execution_20250825 tool:\n          z.object({\n            type: z.literal('bash_code_execution_tool_result'),\n            tool_use_id: z.string(),\n            content: z.discriminatedUnion('type', [\n              z.object({\n                type: z.literal('bash_code_execution_result'),\n                content: z.array(\n                  z.object({\n                    type: z.literal('bash_code_execution_output'),\n                    file_id: z.string(),\n                  }),\n                ),\n                stdout: z.string(),\n                stderr: z.string(),\n                return_code: z.number(),\n              }),\n              z.object({\n                type: z.literal('bash_code_execution_tool_result_error'),\n                error_code: z.string(),\n              }),\n            ]),\n          }),\n          // text editor code execution results for code_execution_20250825 tool:\n          z.object({\n            type: z.literal('text_editor_code_execution_tool_result'),\n            tool_use_id: z.string(),\n            content: z.discriminatedUnion('type', [\n              z.object({\n                type: z.literal('text_editor_code_execution_tool_result_error'),\n                error_code: z.string(),\n              }),\n              z.object({\n                type: z.literal('text_editor_code_execution_view_result'),\n                content: z.string(),\n                file_type: z.string(),\n                num_lines: z.number().nullable(),\n                start_line: z.number().nullable(),\n                total_lines: z.number().nullable(),\n              }),\n              z.object({\n                type: z.literal('text_editor_code_execution_create_result'),\n                is_file_update: z.boolean(),\n              }),\n              z.object({\n                type: z.literal(\n                  'text_editor_code_execution_str_replace_result',\n                ),\n                lines: z.array(z.string()).nullable(),\n                new_lines: z.number().nullable(),\n                new_start: z.number().nullable(),\n                old_lines: z.number().nullable(),\n                old_start: z.number().nullable(),\n              }),\n            ]),\n          }),\n        ]),\n      }),\n      z.object({\n        type: z.literal('content_block_delta'),\n        index: z.number(),\n        delta: z.discriminatedUnion('type', [\n          z.object({\n            type: z.literal('input_json_delta'),\n            partial_json: z.string(),\n          }),\n          z.object({\n            type: z.literal('text_delta'),\n            text: z.string(),\n          }),\n          z.object({\n            type: z.literal('thinking_delta'),\n            thinking: z.string(),\n          }),\n          z.object({\n            type: z.literal('signature_delta'),\n            signature: z.string(),\n          }),\n          z.object({\n            type: z.literal('citations_delta'),\n            citation: z.discriminatedUnion('type', [\n              z.object({\n                type: z.literal('web_search_result_location'),\n                cited_text: z.string(),\n                url: z.string(),\n                title: z.string(),\n                encrypted_index: z.string(),\n              }),\n              z.object({\n                type: z.literal('page_location'),\n                cited_text: z.string(),\n                document_index: z.number(),\n                document_title: z.string().nullable(),\n                start_page_number: z.number(),\n                end_page_number: z.number(),\n              }),\n              z.object({\n                type: z.literal('char_location'),\n                cited_text: z.string(),\n                document_index: z.number(),\n                document_title: z.string().nullable(),\n                start_char_index: z.number(),\n                end_char_index: z.number(),\n              }),\n            ]),\n          }),\n        ]),\n      }),\n      z.object({\n        type: z.literal('content_block_stop'),\n        index: z.number(),\n      }),\n      z.object({\n        type: z.literal('error'),\n        error: z.object({\n          type: z.string(),\n          message: z.string(),\n        }),\n      }),\n      z.object({\n        type: z.literal('message_delta'),\n        delta: z.object({\n          stop_reason: z.string().nullish(),\n          stop_sequence: z.string().nullish(),\n        }),\n        usage: z.looseObject({\n          output_tokens: z.number(),\n          cache_creation_input_tokens: z.number().nullish(),\n        }),\n      }),\n      z.object({\n        type: z.literal('message_stop'),\n      }),\n      z.object({\n        type: z.literal('ping'),\n      }),\n    ]),\n  ),\n);\n\nexport const anthropicReasoningMetadataSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      signature: z.string().optional(),\n      redactedData: z.string().optional(),\n    }),\n  ),\n);\n\nexport type AnthropicReasoningMetadata = InferValidator<\n  typeof anthropicReasoningMetadataSchema\n>;\n\nexport type Citation = NonNullable<\n  (InferValidator<typeof anthropicMessagesResponseSchema>['content'][number] & {\n    type: 'text';\n  })['citations']\n>[number];\n","import { z } from 'zod/v4';\n\n// https://docs.claude.com/en/docs/about-claude/models/overview\nexport type AnthropicMessagesModelId =\n  | 'claude-haiku-4-5'\n  | 'claude-haiku-4-5-20251001'\n  | 'claude-sonnet-4-5'\n  | 'claude-sonnet-4-5-20250929'\n  | 'claude-opus-4-1'\n  | 'claude-opus-4-0'\n  | 'claude-sonnet-4-0'\n  | 'claude-opus-4-1-20250805'\n  | 'claude-opus-4-20250514'\n  | 'claude-sonnet-4-20250514'\n  | 'claude-3-7-sonnet-latest'\n  | 'claude-3-7-sonnet-20250219'\n  | 'claude-3-5-haiku-latest'\n  | 'claude-3-5-haiku-20241022'\n  | 'claude-3-haiku-20240307'\n  | (string & {});\n\n/**\n * Anthropic file part provider options for document-specific features.\n * These options apply to individual file parts (documents).\n */\nexport const anthropicFilePartProviderOptions = z.object({\n  /**\n   * Citation configuration for this document.\n   * When enabled, this document will generate citations in the response.\n   */\n  citations: z\n    .object({\n      /**\n       * Enable citations for this document\n       */\n      enabled: z.boolean(),\n    })\n    .optional(),\n\n  /**\n   * Custom title for the document.\n   * If not provided, the filename will be used.\n   */\n  title: z.string().optional(),\n\n  /**\n   * Context about the document that will be passed to the model\n   * but not used towards cited content.\n   * Useful for storing document metadata as text or stringified JSON.\n   */\n  context: z.string().optional(),\n});\n\nexport type AnthropicFilePartProviderOptions = z.infer<\n  typeof anthropicFilePartProviderOptions\n>;\n\nexport const anthropicProviderOptions = z.object({\n  sendReasoning: z.boolean().optional(),\n\n  thinking: z\n    .object({\n      type: z.union([z.literal('enabled'), z.literal('disabled')]),\n      budgetTokens: z.number().optional(),\n    })\n    .optional(),\n\n  /**\n   * Whether to disable parallel function calling during tool use. Default is false.\n   * When set to true, Claude will use at most one tool per response.\n   */\n  disableParallelToolUse: z.boolean().optional(),\n\n  /**\n   * Cache control settings for this message.\n   * See https://docs.anthropic.com/en/docs/build-with-claude/prompt-caching\n   */\n  cacheControl: z\n    .object({\n      type: z.literal('ephemeral'),\n      ttl: z.union([z.literal('5m'), z.literal('1h')]).optional(),\n    })\n    .optional(),\n\n  /**\n   * Agent Skills configuration. Skills enable Claude to perform specialized tasks\n   * like document processing (PPTX, DOCX, PDF, XLSX) and data analysis.\n   * Requires code execution tool to be enabled.\n   */\n  container: z\n    .object({\n      id: z.string().optional(),\n      skills: z\n        .array(\n          z.object({\n            type: z.union([z.literal('anthropic'), z.literal('custom')]),\n            skillId: z.string(),\n            version: z.string().optional(),\n          }),\n        )\n        .optional(),\n    })\n    .optional(),\n});\n\nexport type AnthropicProviderOptions = z.infer<typeof anthropicProviderOptions>;\n","import {\n  LanguageModelV2CallOptions,\n  LanguageModelV2CallWarning,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport { AnthropicTool, AnthropicToolChoice } from './anthropic-messages-api';\nimport { CacheControlValidator } from './get-cache-control';\nimport { textEditor_20250728ArgsSchema } from './tool/text-editor_20250728';\nimport { webSearch_20250305ArgsSchema } from './tool/web-search_20250305';\nimport { webFetch_20250910ArgsSchema } from './tool/web-fetch-20250910';\nimport { validateTypes } from '@ai-sdk/provider-utils';\n\nexport async function prepareTools({\n  tools,\n  toolChoice,\n  disableParallelToolUse,\n  cacheControlValidator,\n}: {\n  tools: LanguageModelV2CallOptions['tools'];\n  toolChoice?: LanguageModelV2CallOptions['toolChoice'];\n  disableParallelToolUse?: boolean;\n  cacheControlValidator?: CacheControlValidator;\n}): Promise<{\n  tools: Array<AnthropicTool> | undefined;\n  toolChoice: AnthropicToolChoice | undefined;\n  toolWarnings: LanguageModelV2CallWarning[];\n  betas: Set<string>;\n}> {\n  // when the tools array is empty, change it to undefined to prevent errors:\n  tools = tools?.length ? tools : undefined;\n\n  const toolWarnings: LanguageModelV2CallWarning[] = [];\n  const betas = new Set<string>();\n  const validator = cacheControlValidator || new CacheControlValidator();\n\n  if (tools == null) {\n    return { tools: undefined, toolChoice: undefined, toolWarnings, betas };\n  }\n\n  const anthropicTools: AnthropicTool[] = [];\n\n  for (const tool of tools) {\n    switch (tool.type) {\n      case 'function': {\n        const cacheControl = validator.getCacheControl(tool.providerOptions, {\n          type: 'tool definition',\n          canCache: true,\n        });\n\n        anthropicTools.push({\n          name: tool.name,\n          description: tool.description,\n          input_schema: tool.inputSchema,\n          cache_control: cacheControl,\n        });\n        break;\n      }\n\n      case 'provider-defined': {\n        // Note: Provider-defined tools don't currently support providerOptions in the SDK,\n        // so cache_control cannot be set on them. The Anthropic API supports caching all tools,\n        // but the SDK would need to be updated to expose providerOptions on provider-defined tools.\n        switch (tool.id) {\n          case 'anthropic.code_execution_20250522': {\n            betas.add('code-execution-2025-05-22');\n            anthropicTools.push({\n              type: 'code_execution_20250522',\n              name: 'code_execution',\n              cache_control: undefined,\n            });\n            break;\n          }\n          case 'anthropic.code_execution_20250825': {\n            betas.add('code-execution-2025-08-25');\n            anthropicTools.push({\n              type: 'code_execution_20250825',\n              name: 'code_execution',\n            });\n            break;\n          }\n          case 'anthropic.computer_20250124': {\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'computer',\n              type: 'computer_20250124',\n              display_width_px: tool.args.displayWidthPx as number,\n              display_height_px: tool.args.displayHeightPx as number,\n              display_number: tool.args.displayNumber as number,\n              cache_control: undefined,\n            });\n            break;\n          }\n          case 'anthropic.computer_20241022': {\n            betas.add('computer-use-2024-10-22');\n            anthropicTools.push({\n              name: 'computer',\n              type: 'computer_20241022',\n              display_width_px: tool.args.displayWidthPx as number,\n              display_height_px: tool.args.displayHeightPx as number,\n              display_number: tool.args.displayNumber as number,\n              cache_control: undefined,\n            });\n            break;\n          }\n          case 'anthropic.text_editor_20250124': {\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'str_replace_editor',\n              type: 'text_editor_20250124',\n              cache_control: undefined,\n            });\n            break;\n          }\n          case 'anthropic.text_editor_20241022': {\n            betas.add('computer-use-2024-10-22');\n            anthropicTools.push({\n              name: 'str_replace_editor',\n              type: 'text_editor_20241022',\n              cache_control: undefined,\n            });\n            break;\n          }\n          case 'anthropic.text_editor_20250429': {\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'str_replace_based_edit_tool',\n              type: 'text_editor_20250429',\n              cache_control: undefined,\n            });\n            break;\n          }\n          case 'anthropic.text_editor_20250728': {\n            const args = await validateTypes({\n              value: tool.args,\n              schema: textEditor_20250728ArgsSchema,\n            });\n            anthropicTools.push({\n              name: 'str_replace_based_edit_tool',\n              type: 'text_editor_20250728',\n              max_characters: args.maxCharacters,\n              cache_control: undefined,\n            });\n            break;\n          }\n          case 'anthropic.bash_20250124': {\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'bash',\n              type: 'bash_20250124',\n              cache_control: undefined,\n            });\n            break;\n          }\n          case 'anthropic.bash_20241022': {\n            betas.add('computer-use-2024-10-22');\n            anthropicTools.push({\n              name: 'bash',\n              type: 'bash_20241022',\n              cache_control: undefined,\n            });\n            break;\n          }\n          case 'anthropic.memory_20250818': {\n            betas.add('context-management-2025-06-27');\n            anthropicTools.push({\n              name: 'memory',\n              type: 'memory_20250818',\n            });\n            break;\n          }\n          case 'anthropic.web_fetch_20250910': {\n            betas.add('web-fetch-2025-09-10');\n            const args = await validateTypes({\n              value: tool.args,\n              schema: webFetch_20250910ArgsSchema,\n            });\n            anthropicTools.push({\n              type: 'web_fetch_20250910',\n              name: 'web_fetch',\n              max_uses: args.maxUses,\n              allowed_domains: args.allowedDomains,\n              blocked_domains: args.blockedDomains,\n              citations: args.citations,\n              max_content_tokens: args.maxContentTokens,\n              cache_control: undefined,\n            });\n            break;\n          }\n          case 'anthropic.web_search_20250305': {\n            const args = await validateTypes({\n              value: tool.args,\n              schema: webSearch_20250305ArgsSchema,\n            });\n            anthropicTools.push({\n              type: 'web_search_20250305',\n              name: 'web_search',\n              max_uses: args.maxUses,\n              allowed_domains: args.allowedDomains,\n              blocked_domains: args.blockedDomains,\n              user_location: args.userLocation,\n              cache_control: undefined,\n            });\n            break;\n          }\n\n          default: {\n            toolWarnings.push({ type: 'unsupported-tool', tool });\n            break;\n          }\n        }\n        break;\n      }\n\n      default: {\n        toolWarnings.push({ type: 'unsupported-tool', tool });\n        break;\n      }\n    }\n  }\n\n  if (toolChoice == null) {\n    return {\n      tools: anthropicTools,\n      toolChoice: disableParallelToolUse\n        ? { type: 'auto', disable_parallel_tool_use: disableParallelToolUse }\n        : undefined,\n      toolWarnings,\n      betas,\n    };\n  }\n\n  const type = toolChoice.type;\n\n  switch (type) {\n    case 'auto':\n      return {\n        tools: anthropicTools,\n        toolChoice: {\n          type: 'auto',\n          disable_parallel_tool_use: disableParallelToolUse,\n        },\n        toolWarnings,\n        betas,\n      };\n    case 'required':\n      return {\n        tools: anthropicTools,\n        toolChoice: {\n          type: 'any',\n          disable_parallel_tool_use: disableParallelToolUse,\n        },\n        toolWarnings,\n        betas,\n      };\n    case 'none':\n      // Anthropic does not support 'none' tool choice, so we remove the tools:\n      return { tools: undefined, toolChoice: undefined, toolWarnings, betas };\n    case 'tool':\n      return {\n        tools: anthropicTools,\n        toolChoice: {\n          type: 'tool',\n          name: toolChoice.toolName,\n          disable_parallel_tool_use: disableParallelToolUse,\n        },\n        toolWarnings,\n        betas,\n      };\n    default: {\n      const _exhaustiveCheck: never = type;\n      throw new UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`,\n      });\n    }\n  }\n}\n","import {\n  LanguageModelV2CallWarning,\n  SharedV2ProviderMetadata,\n} from '@ai-sdk/provider';\nimport { AnthropicCacheControl } from './anthropic-messages-api';\n\n// Anthropic allows a maximum of 4 cache breakpoints per request\nconst MAX_CACHE_BREAKPOINTS = 4;\n\n// Helper function to extract cache_control from provider metadata\n// Allows both cacheControl and cache_control for flexibility\nfunction getCacheControl(\n  providerMetadata: SharedV2ProviderMetadata | undefined,\n): AnthropicCacheControl | undefined {\n  const anthropic = providerMetadata?.anthropic;\n\n  // allow both cacheControl and cache_control:\n  const cacheControlValue = anthropic?.cacheControl ?? anthropic?.cache_control;\n\n  // Pass through value assuming it is of the correct type.\n  // The Anthropic API will validate the value.\n  return cacheControlValue as AnthropicCacheControl | undefined;\n}\n\nexport class CacheControlValidator {\n  private breakpointCount = 0;\n  private warnings: LanguageModelV2CallWarning[] = [];\n\n  getCacheControl(\n    providerMetadata: SharedV2ProviderMetadata | undefined,\n    context: { type: string; canCache: boolean },\n  ): AnthropicCacheControl | undefined {\n    const cacheControlValue = getCacheControl(providerMetadata);\n\n    if (!cacheControlValue) {\n      return undefined;\n    }\n\n    // Validate that cache_control is allowed in this context\n    if (!context.canCache) {\n      this.warnings.push({\n        type: 'unsupported-setting',\n        setting: 'cacheControl',\n        details: `cache_control cannot be set on ${context.type}. It will be ignored.`,\n      });\n      return undefined;\n    }\n\n    // Validate cache breakpoint limit\n    this.breakpointCount++;\n    if (this.breakpointCount > MAX_CACHE_BREAKPOINTS) {\n      this.warnings.push({\n        type: 'unsupported-setting',\n        setting: 'cacheControl',\n        details: `Maximum ${MAX_CACHE_BREAKPOINTS} cache breakpoints exceeded (found ${this.breakpointCount}). This breakpoint will be ignored.`,\n      });\n      return undefined;\n    }\n\n    return cacheControlValue;\n  }\n\n  getWarnings(): LanguageModelV2CallWarning[] {\n    return this.warnings;\n  }\n}\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport { lazySchema, zodSchema } from '@ai-sdk/provider-utils';\n\nexport const textEditor_20250728ArgsSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      maxCharacters: z.number().optional(),\n    }),\n  ),\n);\n\nconst textEditor_20250728InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      command: z.enum(['view', 'create', 'str_replace', 'insert']),\n      path: z.string(),\n      file_text: z.string().optional(),\n      insert_line: z.number().int().optional(),\n      new_str: z.string().optional(),\n      old_str: z.string().optional(),\n      view_range: z.array(z.number().int()).optional(),\n    }),\n  ),\n);\n\nconst factory = createProviderDefinedToolFactory<\n  {\n    /**\n     * The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`.\n     * Note: `undo_edit` is not supported in Claude 4 models.\n     */\n    command: 'view' | 'create' | 'str_replace' | 'insert';\n\n    /**\n     * Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.\n     */\n    path: string;\n\n    /**\n     * Required parameter of `create` command, with the content of the file to be created.\n     */\n    file_text?: string;\n\n    /**\n     * Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.\n     */\n    insert_line?: number;\n\n    /**\n     * Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.\n     */\n    new_str?: string;\n\n    /**\n     * Required parameter of `str_replace` command containing the string in `path` to replace.\n     */\n    old_str?: string;\n\n    /**\n     * Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.\n     */\n    view_range?: number[];\n  },\n  {\n    /**\n     * Optional parameter to control truncation when viewing large files. Only compatible with text_editor_20250728 and later versions.\n     */\n    maxCharacters?: number;\n  }\n>({\n  id: 'anthropic.text_editor_20250728',\n  name: 'str_replace_based_edit_tool',\n  inputSchema: textEditor_20250728InputSchema,\n});\n\nexport const textEditor_20250728 = (\n  args: Parameters<typeof factory>[0] = {}, // default\n) => {\n  return factory(args);\n};\n","import {\n  createProviderDefinedToolFactoryWithOutputSchema,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const webSearch_20250305ArgsSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      maxUses: z.number().optional(),\n      allowedDomains: z.array(z.string()).optional(),\n      blockedDomains: z.array(z.string()).optional(),\n      userLocation: z\n        .object({\n          type: z.literal('approximate'),\n          city: z.string().optional(),\n          region: z.string().optional(),\n          country: z.string().optional(),\n          timezone: z.string().optional(),\n        })\n        .optional(),\n    }),\n  ),\n);\n\nexport const webSearch_20250305OutputSchema = lazySchema(() =>\n  zodSchema(\n    z.array(\n      z.object({\n        url: z.string(),\n        title: z.string(),\n        pageAge: z.string().nullable(),\n        encryptedContent: z.string(),\n        type: z.literal('web_search_result'),\n      }),\n    ),\n  ),\n);\n\nconst webSearch_20250305InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      query: z.string(),\n    }),\n  ),\n);\n\nconst factory = createProviderDefinedToolFactoryWithOutputSchema<\n  {\n    /**\n     * The search query to execute.\n     */\n    query: string;\n  },\n  Array<{\n    type: 'web_search_result';\n\n    /**\n     * The URL of the source page.\n     */\n    url: string;\n\n    /**\n     * The title of the source page.\n     */\n    title: string;\n\n    /**\n     * When the site was last updated\n     */\n    pageAge: string | null;\n\n    /**\n     * Encrypted content that must be passed back in multi-turn conversations for citations\n     */\n    encryptedContent: string;\n  }>,\n  {\n    /**\n     * Maximum number of web searches Claude can perform during the conversation.\n     */\n    maxUses?: number;\n\n    /**\n     * Optional list of domains that Claude is allowed to search.\n     */\n    allowedDomains?: string[];\n\n    /**\n     * Optional list of domains that Claude should avoid when searching.\n     */\n    blockedDomains?: string[];\n\n    /**\n     * Optional user location information to provide geographically relevant search results.\n     */\n    userLocation?: {\n      /**\n       * The type of location (must be approximate)\n       */\n      type: 'approximate';\n\n      /**\n       * The city name\n       */\n      city?: string;\n\n      /**\n       * The region or state\n       */\n      region?: string;\n\n      /**\n       * The country\n       */\n      country?: string;\n\n      /**\n       * The IANA timezone ID.\n       */\n      timezone?: string;\n    };\n  }\n>({\n  id: 'anthropic.web_search_20250305',\n  name: 'web_search',\n  inputSchema: webSearch_20250305InputSchema,\n  outputSchema: webSearch_20250305OutputSchema,\n});\n\nexport const webSearch_20250305 = (\n  args: Parameters<typeof factory>[0] = {}, // default\n) => {\n  return factory(args);\n};\n","import {\n  createProviderDefinedToolFactoryWithOutputSchema,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const webFetch_20250910ArgsSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      maxUses: z.number().optional(),\n      allowedDomains: z.array(z.string()).optional(),\n      blockedDomains: z.array(z.string()).optional(),\n      citations: z.object({ enabled: z.boolean() }).optional(),\n      maxContentTokens: z.number().optional(),\n    }),\n  ),\n);\n\nexport const webFetch_20250910OutputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      type: z.literal('web_fetch_result'),\n      url: z.string(),\n      content: z.object({\n        type: z.literal('document'),\n        title: z.string(),\n        citations: z.object({ enabled: z.boolean() }).optional(),\n        source: z.union([\n          z.object({\n            type: z.literal('base64'),\n            mediaType: z.literal('application/pdf'),\n            data: z.string(),\n          }),\n          z.object({\n            type: z.literal('text'),\n            mediaType: z.literal('text/plain'),\n            data: z.string(),\n          }),\n        ]),\n      }),\n      retrievedAt: z.string().nullable(),\n    }),\n  ),\n);\n\nconst webFetch_20250910InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      url: z.string(),\n    }),\n  ),\n);\n\nconst factory = createProviderDefinedToolFactoryWithOutputSchema<\n  {\n    /**\n     * The URL to fetch.\n     */\n    url: string;\n  },\n  {\n    type: 'web_fetch_result';\n\n    /**\n     * Fetched content URL\n     */\n    url: string;\n\n    /**\n     * Fetched content.\n     */\n    content: {\n      type: 'document';\n\n      /**\n       * Title of the document\n       */\n      title: string;\n\n      /**\n       * Citation configuration for the document\n       */\n      citations?: { enabled: boolean };\n\n      source:\n        | {\n            type: 'base64';\n            mediaType: 'application/pdf';\n            data: string;\n          }\n        | {\n            type: 'text';\n            mediaType: 'text/plain';\n            data: string;\n          };\n    };\n\n    /**\n     * ISO 8601 timestamp when the content was retrieved\n     */\n    retrievedAt: string | null;\n  },\n  {\n    /**\n     * The maxUses parameter limits the number of web fetches performed\n     */\n    maxUses?: number;\n\n    /**\n     * Only fetch from these domains\n     */\n    allowedDomains?: string[];\n\n    /**\n     * Never fetch from these domains\n     */\n    blockedDomains?: string[];\n\n    /**\n     * Unlike web search where citations are always enabled, citations are optional for\n     * web fetch. Set \"citations\": {\"enabled\": true} to enable Claude to cite specific passages\n     * from fetched documents.\n     */\n    citations?: {\n      enabled: boolean;\n    };\n\n    /**\n     * The maxContentTokens parameter limits the amount of content that will be included in the context.\n     */\n    maxContentTokens?: number;\n  }\n>({\n  id: 'anthropic.web_fetch_20250910',\n  name: 'web_fetch',\n  inputSchema: webFetch_20250910InputSchema,\n  outputSchema: webFetch_20250910OutputSchema,\n});\n\nexport const webFetch_20250910 = (\n  args: Parameters<typeof factory>[0] = {}, // default\n) => {\n  return factory(args);\n};\n","import {\n  LanguageModelV2CallWarning,\n  LanguageModelV2DataContent,\n  LanguageModelV2Message,\n  LanguageModelV2Prompt,\n  SharedV2ProviderMetadata,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport {\n  convertToBase64,\n  parseProviderOptions,\n  validateTypes,\n} from '@ai-sdk/provider-utils';\nimport {\n  AnthropicAssistantMessage,\n  AnthropicMessagesPrompt,\n  anthropicReasoningMetadataSchema,\n  AnthropicToolResultContent,\n  AnthropicUserMessage,\n  AnthropicWebFetchToolResultContent,\n} from './anthropic-messages-api';\nimport { anthropicFilePartProviderOptions } from './anthropic-messages-options';\nimport { CacheControlValidator } from './get-cache-control';\nimport { codeExecution_20250522OutputSchema } from './tool/code-execution_20250522';\nimport { codeExecution_20250825OutputSchema } from './tool/code-execution_20250825';\nimport { webFetch_20250910OutputSchema } from './tool/web-fetch-20250910';\nimport { webSearch_20250305OutputSchema } from './tool/web-search_20250305';\n\nfunction convertToString(data: LanguageModelV2DataContent): string {\n  if (typeof data === 'string') {\n    return Buffer.from(data, 'base64').toString('utf-8');\n  }\n\n  if (data instanceof Uint8Array) {\n    return new TextDecoder().decode(data);\n  }\n\n  if (data instanceof URL) {\n    throw new UnsupportedFunctionalityError({\n      functionality: 'URL-based text documents are not supported for citations',\n    });\n  }\n\n  throw new UnsupportedFunctionalityError({\n    functionality: `unsupported data type for text documents: ${typeof data}`,\n  });\n}\n\nexport async function convertToAnthropicMessagesPrompt({\n  prompt,\n  sendReasoning,\n  warnings,\n  cacheControlValidator,\n}: {\n  prompt: LanguageModelV2Prompt;\n  sendReasoning: boolean;\n  warnings: LanguageModelV2CallWarning[];\n  cacheControlValidator?: CacheControlValidator;\n}): Promise<{\n  prompt: AnthropicMessagesPrompt;\n  betas: Set<string>;\n}> {\n  const betas = new Set<string>();\n  const blocks = groupIntoBlocks(prompt);\n  const validator = cacheControlValidator || new CacheControlValidator();\n\n  let system: AnthropicMessagesPrompt['system'] = undefined;\n  const messages: AnthropicMessagesPrompt['messages'] = [];\n\n  async function shouldEnableCitations(\n    providerMetadata: SharedV2ProviderMetadata | undefined,\n  ): Promise<boolean> {\n    const anthropicOptions = await parseProviderOptions({\n      provider: 'anthropic',\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions,\n    });\n\n    return anthropicOptions?.citations?.enabled ?? false;\n  }\n\n  async function getDocumentMetadata(\n    providerMetadata: SharedV2ProviderMetadata | undefined,\n  ): Promise<{ title?: string; context?: string }> {\n    const anthropicOptions = await parseProviderOptions({\n      provider: 'anthropic',\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions,\n    });\n\n    return {\n      title: anthropicOptions?.title,\n      context: anthropicOptions?.context,\n    };\n  }\n\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    const isLastBlock = i === blocks.length - 1;\n    const type = block.type;\n\n    switch (type) {\n      case 'system': {\n        if (system != null) {\n          throw new UnsupportedFunctionalityError({\n            functionality:\n              'Multiple system messages that are separated by user/assistant messages',\n          });\n        }\n\n        system = block.messages.map(({ content, providerOptions }) => ({\n          type: 'text',\n          text: content,\n          cache_control: validator.getCacheControl(providerOptions, {\n            type: 'system message',\n            canCache: true,\n          }),\n        }));\n\n        break;\n      }\n\n      case 'user': {\n        // combines all user and tool messages in this block into a single message:\n        const anthropicContent: AnthropicUserMessage['content'] = [];\n\n        for (const message of block.messages) {\n          const { role, content } = message;\n          switch (role) {\n            case 'user': {\n              for (let j = 0; j < content.length; j++) {\n                const part = content[j];\n\n                // cache control: first add cache control from part.\n                // for the last part of a message,\n                // check also if the message has cache control.\n                const isLastPart = j === content.length - 1;\n\n                const cacheControl =\n                  validator.getCacheControl(part.providerOptions, {\n                    type: 'user message part',\n                    canCache: true,\n                  }) ??\n                  (isLastPart\n                    ? validator.getCacheControl(message.providerOptions, {\n                        type: 'user message',\n                        canCache: true,\n                      })\n                    : undefined);\n\n                switch (part.type) {\n                  case 'text': {\n                    anthropicContent.push({\n                      type: 'text',\n                      text: part.text,\n                      cache_control: cacheControl,\n                    });\n                    break;\n                  }\n\n                  case 'file': {\n                    if (part.mediaType.startsWith('image/')) {\n                      anthropicContent.push({\n                        type: 'image',\n                        source:\n                          part.data instanceof URL\n                            ? {\n                                type: 'url',\n                                url: part.data.toString(),\n                              }\n                            : {\n                                type: 'base64',\n                                media_type:\n                                  part.mediaType === 'image/*'\n                                    ? 'image/jpeg'\n                                    : part.mediaType,\n                                data: convertToBase64(part.data),\n                              },\n                        cache_control: cacheControl,\n                      });\n                    } else if (part.mediaType === 'application/pdf') {\n                      betas.add('pdfs-2024-09-25');\n\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions,\n                      );\n\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions,\n                      );\n\n                      anthropicContent.push({\n                        type: 'document',\n                        source:\n                          part.data instanceof URL\n                            ? {\n                                type: 'url',\n                                url: part.data.toString(),\n                              }\n                            : {\n                                type: 'base64',\n                                media_type: 'application/pdf',\n                                data: convertToBase64(part.data),\n                              },\n                        title: metadata.title ?? part.filename,\n                        ...(metadata.context && { context: metadata.context }),\n                        ...(enableCitations && {\n                          citations: { enabled: true },\n                        }),\n                        cache_control: cacheControl,\n                      });\n                    } else if (part.mediaType === 'text/plain') {\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions,\n                      );\n\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions,\n                      );\n\n                      anthropicContent.push({\n                        type: 'document',\n                        source:\n                          part.data instanceof URL\n                            ? {\n                                type: 'url',\n                                url: part.data.toString(),\n                              }\n                            : {\n                                type: 'text',\n                                media_type: 'text/plain',\n                                data: convertToString(part.data),\n                              },\n                        title: metadata.title ?? part.filename,\n                        ...(metadata.context && { context: metadata.context }),\n                        ...(enableCitations && {\n                          citations: { enabled: true },\n                        }),\n                        cache_control: cacheControl,\n                      });\n                    } else {\n                      throw new UnsupportedFunctionalityError({\n                        functionality: `media type: ${part.mediaType}`,\n                      });\n                    }\n\n                    break;\n                  }\n                }\n              }\n\n              break;\n            }\n            case 'tool': {\n              for (let i = 0; i < content.length; i++) {\n                const part = content[i];\n\n                // cache control: first add cache control from part.\n                // for the last part of a message,\n                // check also if the message has cache control.\n                const isLastPart = i === content.length - 1;\n\n                const cacheControl =\n                  validator.getCacheControl(part.providerOptions, {\n                    type: 'tool result part',\n                    canCache: true,\n                  }) ??\n                  (isLastPart\n                    ? validator.getCacheControl(message.providerOptions, {\n                        type: 'tool result message',\n                        canCache: true,\n                      })\n                    : undefined);\n\n                const output = part.output;\n                let contentValue: AnthropicToolResultContent['content'];\n                switch (output.type) {\n                  case 'content':\n                    contentValue = output.value.map(contentPart => {\n                      switch (contentPart.type) {\n                        case 'text':\n                          return {\n                            type: 'text',\n                            text: contentPart.text,\n                          };\n                        case 'media': {\n                          if (contentPart.mediaType.startsWith('image/')) {\n                            return {\n                              type: 'image',\n                              source: {\n                                type: 'base64',\n                                media_type: contentPart.mediaType,\n                                data: contentPart.data,\n                              },\n                            };\n                          }\n\n                          if (contentPart.mediaType === 'application/pdf') {\n                            betas.add('pdfs-2024-09-25');\n\n                            return {\n                              type: 'document',\n                              source: {\n                                type: 'base64',\n                                media_type: contentPart.mediaType,\n                                data: contentPart.data,\n                              },\n                            };\n                          }\n\n                          throw new UnsupportedFunctionalityError({\n                            functionality: `media type: ${contentPart.mediaType}`,\n                          });\n                        }\n                      }\n                    });\n                    break;\n                  case 'text':\n                  case 'error-text':\n                    contentValue = output.value;\n                    break;\n                  case 'json':\n                  case 'error-json':\n                  default:\n                    contentValue = JSON.stringify(output.value);\n                    break;\n                }\n\n                anthropicContent.push({\n                  type: 'tool_result',\n                  tool_use_id: part.toolCallId,\n                  content: contentValue,\n                  is_error:\n                    output.type === 'error-text' || output.type === 'error-json'\n                      ? true\n                      : undefined,\n                  cache_control: cacheControl,\n                });\n              }\n\n              break;\n            }\n            default: {\n              const _exhaustiveCheck: never = role;\n              throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n            }\n          }\n        }\n\n        messages.push({ role: 'user', content: anthropicContent });\n\n        break;\n      }\n\n      case 'assistant': {\n        // combines multiple assistant messages in this block into a single message:\n        const anthropicContent: AnthropicAssistantMessage['content'] = [];\n\n        for (let j = 0; j < block.messages.length; j++) {\n          const message = block.messages[j];\n          const isLastMessage = j === block.messages.length - 1;\n          const { content } = message;\n\n          for (let k = 0; k < content.length; k++) {\n            const part = content[k];\n            const isLastContentPart = k === content.length - 1;\n\n            // cache control: first add cache control from part.\n            // for the last part of a message,\n            // check also if the message has cache control.\n            const cacheControl =\n              validator.getCacheControl(part.providerOptions, {\n                type: 'assistant message part',\n                canCache: true,\n              }) ??\n              (isLastContentPart\n                ? validator.getCacheControl(message.providerOptions, {\n                    type: 'assistant message',\n                    canCache: true,\n                  })\n                : undefined);\n\n            switch (part.type) {\n              case 'text': {\n                anthropicContent.push({\n                  type: 'text',\n                  text:\n                    // trim the last text part if it's the last message in the block\n                    // because Anthropic does not allow trailing whitespace\n                    // in pre-filled assistant responses\n                    isLastBlock && isLastMessage && isLastContentPart\n                      ? part.text.trim()\n                      : part.text,\n\n                  cache_control: cacheControl,\n                });\n                break;\n              }\n\n              case 'reasoning': {\n                if (sendReasoning) {\n                  const reasoningMetadata = await parseProviderOptions({\n                    provider: 'anthropic',\n                    providerOptions: part.providerOptions,\n                    schema: anthropicReasoningMetadataSchema,\n                  });\n\n                  if (reasoningMetadata != null) {\n                    if (reasoningMetadata.signature != null) {\n                      // Note: thinking blocks cannot have cache_control directly\n                      // They are cached implicitly when in previous assistant turns\n                      // Validate to provide helpful error message\n                      validator.getCacheControl(part.providerOptions, {\n                        type: 'thinking block',\n                        canCache: false,\n                      });\n                      anthropicContent.push({\n                        type: 'thinking',\n                        thinking: part.text,\n                        signature: reasoningMetadata.signature,\n                      });\n                    } else if (reasoningMetadata.redactedData != null) {\n                      // Note: redacted thinking blocks cannot have cache_control directly\n                      // They are cached implicitly when in previous assistant turns\n                      // Validate to provide helpful error message\n                      validator.getCacheControl(part.providerOptions, {\n                        type: 'redacted thinking block',\n                        canCache: false,\n                      });\n                      anthropicContent.push({\n                        type: 'redacted_thinking',\n                        data: reasoningMetadata.redactedData,\n                      });\n                    } else {\n                      warnings.push({\n                        type: 'other',\n                        message: 'unsupported reasoning metadata',\n                      });\n                    }\n                  } else {\n                    warnings.push({\n                      type: 'other',\n                      message: 'unsupported reasoning metadata',\n                    });\n                  }\n                } else {\n                  warnings.push({\n                    type: 'other',\n                    message:\n                      'sending reasoning content is disabled for this model',\n                  });\n                }\n                break;\n              }\n\n              case 'tool-call': {\n                if (part.providerExecuted) {\n                  // code execution 20250825:\n                  if (\n                    part.toolName === 'code_execution' &&\n                    part.input != null &&\n                    typeof part.input === 'object' &&\n                    'type' in part.input &&\n                    typeof part.input.type === 'string' &&\n                    (part.input.type === 'bash_code_execution' ||\n                      part.input.type === 'text_editor_code_execution')\n                  ) {\n                    anthropicContent.push({\n                      type: 'server_tool_use',\n                      id: part.toolCallId,\n                      name: part.input.type, // map back to subtool name\n                      input: part.input,\n                      cache_control: cacheControl,\n                    });\n                  } else if (\n                    part.toolName === 'code_execution' || // code execution 20250522\n                    part.toolName === 'web_fetch' ||\n                    part.toolName === 'web_search'\n                  ) {\n                    anthropicContent.push({\n                      type: 'server_tool_use',\n                      id: part.toolCallId,\n                      name: part.toolName,\n                      input: part.input,\n                      cache_control: cacheControl,\n                    });\n                  } else {\n                    warnings.push({\n                      type: 'other',\n                      message: `provider executed tool call for tool ${part.toolName} is not supported`,\n                    });\n                  }\n\n                  break;\n                }\n\n                anthropicContent.push({\n                  type: 'tool_use',\n                  id: part.toolCallId,\n                  name: part.toolName,\n                  input: part.input,\n                  cache_control: cacheControl,\n                });\n                break;\n              }\n\n              case 'tool-result': {\n                if (part.toolName === 'code_execution') {\n                  const output = part.output;\n\n                  if (output.type !== 'json') {\n                    warnings.push({\n                      type: 'other',\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`,\n                    });\n\n                    break;\n                  }\n\n                  if (\n                    output.value == null ||\n                    typeof output.value !== 'object' ||\n                    !('type' in output.value) ||\n                    typeof output.value.type !== 'string'\n                  ) {\n                    warnings.push({\n                      type: 'other',\n                      message: `provider executed tool result output value is not a valid code execution result for tool ${part.toolName}`,\n                    });\n                    break;\n                  }\n\n                  // to distinguish between code execution 20250522 and 20250825,\n                  // we check if a type property is present in the output.value\n                  if (output.value.type === 'code_execution_result') {\n                    // code execution 20250522\n                    const codeExecutionOutput = await validateTypes({\n                      value: output.value,\n                      schema: codeExecution_20250522OutputSchema,\n                    });\n\n                    anthropicContent.push({\n                      type: 'code_execution_tool_result',\n                      tool_use_id: part.toolCallId,\n                      content: {\n                        type: codeExecutionOutput.type,\n                        stdout: codeExecutionOutput.stdout,\n                        stderr: codeExecutionOutput.stderr,\n                        return_code: codeExecutionOutput.return_code,\n                      },\n                      cache_control: cacheControl,\n                    });\n                  } else {\n                    // code execution 20250825\n                    const codeExecutionOutput = await validateTypes({\n                      value: output.value,\n                      schema: codeExecution_20250825OutputSchema,\n                    });\n\n                    anthropicContent.push(\n                      codeExecutionOutput.type ===\n                        'bash_code_execution_result' ||\n                        codeExecutionOutput.type ===\n                          'bash_code_execution_tool_result_error'\n                        ? {\n                            type: 'bash_code_execution_tool_result',\n                            tool_use_id: part.toolCallId,\n                            cache_control: cacheControl,\n                            content: codeExecutionOutput,\n                          }\n                        : {\n                            type: 'text_editor_code_execution_tool_result',\n                            tool_use_id: part.toolCallId,\n                            cache_control: cacheControl,\n                            content: codeExecutionOutput,\n                          },\n                    );\n                  }\n                  break;\n                }\n\n                if (part.toolName === 'web_fetch') {\n                  const output = part.output;\n\n                  if (output.type !== 'json') {\n                    warnings.push({\n                      type: 'other',\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`,\n                    });\n\n                    break;\n                  }\n\n                  const webFetchOutput = await validateTypes({\n                    value: output.value,\n                    schema: webFetch_20250910OutputSchema,\n                  });\n\n                  anthropicContent.push({\n                    type: 'web_fetch_tool_result',\n                    tool_use_id: part.toolCallId,\n                    content: {\n                      type: 'web_fetch_result',\n                      url: webFetchOutput.url,\n                      retrieved_at: webFetchOutput.retrievedAt,\n                      content: {\n                        type: 'document',\n                        title: webFetchOutput.content.title,\n                        citations: webFetchOutput.content.citations,\n                        source: {\n                          type: webFetchOutput.content.source.type,\n                          media_type: webFetchOutput.content.source.mediaType,\n                          data: webFetchOutput.content.source.data,\n                        } as AnthropicWebFetchToolResultContent['content']['content']['source'],\n                      },\n                    },\n                    cache_control: cacheControl,\n                  });\n\n                  break;\n                }\n\n                if (part.toolName === 'web_search') {\n                  const output = part.output;\n\n                  if (output.type !== 'json') {\n                    warnings.push({\n                      type: 'other',\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`,\n                    });\n\n                    break;\n                  }\n\n                  const webSearchOutput = await validateTypes({\n                    value: output.value,\n                    schema: webSearch_20250305OutputSchema,\n                  });\n\n                  anthropicContent.push({\n                    type: 'web_search_tool_result',\n                    tool_use_id: part.toolCallId,\n                    content: webSearchOutput.map(result => ({\n                      url: result.url,\n                      title: result.title,\n                      page_age: result.pageAge,\n                      encrypted_content: result.encryptedContent,\n                      type: result.type,\n                    })),\n                    cache_control: cacheControl,\n                  });\n\n                  break;\n                }\n\n                warnings.push({\n                  type: 'other',\n                  message: `provider executed tool result for tool ${part.toolName} is not supported`,\n                });\n\n                break;\n              }\n            }\n          }\n        }\n\n        messages.push({ role: 'assistant', content: anthropicContent });\n\n        break;\n      }\n\n      default: {\n        const _exhaustiveCheck: never = type;\n        throw new Error(`content type: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n\n  return {\n    prompt: { system, messages },\n    betas,\n  };\n}\n\ntype SystemBlock = {\n  type: 'system';\n  messages: Array<LanguageModelV2Message & { role: 'system' }>;\n};\ntype AssistantBlock = {\n  type: 'assistant';\n  messages: Array<LanguageModelV2Message & { role: 'assistant' }>;\n};\ntype UserBlock = {\n  type: 'user';\n  messages: Array<LanguageModelV2Message & { role: 'user' | 'tool' }>;\n};\n\nfunction groupIntoBlocks(\n  prompt: LanguageModelV2Prompt,\n): Array<SystemBlock | AssistantBlock | UserBlock> {\n  const blocks: Array<SystemBlock | AssistantBlock | UserBlock> = [];\n  let currentBlock: SystemBlock | AssistantBlock | UserBlock | undefined =\n    undefined;\n\n  for (const message of prompt) {\n    const { role } = message;\n    switch (role) {\n      case 'system': {\n        if (currentBlock?.type !== 'system') {\n          currentBlock = { type: 'system', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      case 'assistant': {\n        if (currentBlock?.type !== 'assistant') {\n          currentBlock = { type: 'assistant', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      case 'user': {\n        if (currentBlock?.type !== 'user') {\n          currentBlock = { type: 'user', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      case 'tool': {\n        if (currentBlock?.type !== 'user') {\n          currentBlock = { type: 'user', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      default: {\n        const _exhaustiveCheck: never = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n\n  return blocks;\n}\n","import {\n  createProviderDefinedToolFactoryWithOutputSchema,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const codeExecution_20250522OutputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      type: z.literal('code_execution_result'),\n      stdout: z.string(),\n      stderr: z.string(),\n      return_code: z.number(),\n    }),\n  ),\n);\n\nconst codeExecution_20250522InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      code: z.string(),\n    }),\n  ),\n);\n\nconst factory = createProviderDefinedToolFactoryWithOutputSchema<\n  {\n    /**\n     * The Python code to execute.\n     */\n    code: string;\n  },\n  {\n    type: 'code_execution_result';\n    stdout: string;\n    stderr: string;\n    return_code: number;\n  },\n  {}\n>({\n  id: 'anthropic.code_execution_20250522',\n  name: 'code_execution',\n  inputSchema: codeExecution_20250522InputSchema,\n  outputSchema: codeExecution_20250522OutputSchema,\n});\n\nexport const codeExecution_20250522 = (\n  args: Parameters<typeof factory>[0] = {},\n) => {\n  return factory(args);\n};\n","import {\n  createProviderDefinedToolFactoryWithOutputSchema,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const codeExecution_20250825OutputSchema = lazySchema(() =>\n  zodSchema(\n    z.discriminatedUnion('type', [\n      z.object({\n        type: z.literal('bash_code_execution_result'),\n        content: z.array(\n          z.object({\n            type: z.literal('bash_code_execution_output'),\n            file_id: z.string(),\n          }),\n        ),\n        stdout: z.string(),\n        stderr: z.string(),\n        return_code: z.number(),\n      }),\n      z.object({\n        type: z.literal('bash_code_execution_tool_result_error'),\n        error_code: z.string(),\n      }),\n      z.object({\n        type: z.literal('text_editor_code_execution_tool_result_error'),\n        error_code: z.string(),\n      }),\n      z.object({\n        type: z.literal('text_editor_code_execution_view_result'),\n        content: z.string(),\n        file_type: z.string(),\n        num_lines: z.number().nullable(),\n        start_line: z.number().nullable(),\n        total_lines: z.number().nullable(),\n      }),\n      z.object({\n        type: z.literal('text_editor_code_execution_create_result'),\n        is_file_update: z.boolean(),\n      }),\n      z.object({\n        type: z.literal('text_editor_code_execution_str_replace_result'),\n        lines: z.array(z.string()).nullable(),\n        new_lines: z.number().nullable(),\n        new_start: z.number().nullable(),\n        old_lines: z.number().nullable(),\n        old_start: z.number().nullable(),\n      }),\n    ]),\n  ),\n);\n\nexport const codeExecution_20250825InputSchema = lazySchema(() =>\n  zodSchema(\n    z.discriminatedUnion('type', [\n      z.object({\n        type: z.literal('bash_code_execution'),\n        command: z.string(),\n      }),\n      z.discriminatedUnion('command', [\n        z.object({\n          type: z.literal('text_editor_code_execution'),\n          command: z.literal('view'),\n          path: z.string(),\n        }),\n        z.object({\n          type: z.literal('text_editor_code_execution'),\n          command: z.literal('create'),\n          path: z.string(),\n          file_text: z.string().nullish(),\n        }),\n        z.object({\n          type: z.literal('text_editor_code_execution'),\n          command: z.literal('str_replace'),\n          path: z.string(),\n          old_str: z.string(),\n          new_str: z.string(),\n        }),\n      ]),\n    ]),\n  ),\n);\n\nconst factory = createProviderDefinedToolFactoryWithOutputSchema<\n  | {\n      type: 'bash_code_execution';\n\n      /**\n       * Shell command to execute.\n       */\n      command: string;\n    }\n  | {\n      type: 'text_editor_code_execution';\n      command: 'view';\n\n      /**\n       * The path to the file to view.\n       */\n      path: string;\n    }\n  | {\n      type: 'text_editor_code_execution';\n      command: 'create';\n\n      /**\n       * The path to the file to edit.\n       */\n      path: string;\n\n      /**\n       * The text of the file to edit.\n       */\n      file_text?: string | null;\n    }\n  | {\n      type: 'text_editor_code_execution';\n      command: 'str_replace';\n\n      /**\n       * The path to the file to edit.\n       */\n      path: string;\n\n      /**\n       * The string to replace.\n       */\n      old_str: string;\n\n      /**\n       * The new string to replace the old string with.\n       */\n      new_str: string;\n    },\n  | {\n      type: 'bash_code_execution_result';\n\n      /**\n       * Output from successful execution\n       */\n      stdout: string;\n\n      /**\n       * Error messages if execution fails\n       */\n      stderr: string;\n\n      /**\n       * 0 for success, non-zero for failure\n       */\n      return_code: number;\n    }\n  | {\n      type: 'bash_code_execution_tool_result_error';\n\n      /**\n       * Available options: invalid_tool_input, unavailable, too_many_requests,\n       * execution_time_exceeded, output_file_too_large.\n       */\n      error_code: string;\n    }\n  | {\n      type: 'text_editor_code_execution_tool_result_error';\n\n      /**\n       * Available options: invalid_tool_input, unavailable, too_many_requests,\n       * execution_time_exceeded, file_not_found.\n       */\n      error_code: string;\n    }\n  | {\n      type: 'text_editor_code_execution_view_result';\n\n      content: string;\n\n      /**\n       * The type of the file. Available options: text, image, pdf.\n       */\n      file_type: string;\n\n      num_lines: number | null;\n      start_line: number | null;\n      total_lines: number | null;\n    }\n  | {\n      type: 'text_editor_code_execution_create_result';\n\n      is_file_update: boolean;\n    }\n  | {\n      type: 'text_editor_code_execution_str_replace_result';\n\n      lines: string[] | null;\n      new_lines: number | null;\n      new_start: number | null;\n      old_lines: number | null;\n      old_start: number | null;\n    },\n  {\n    // no arguments\n  }\n>({\n  id: 'anthropic.code_execution_20250825',\n  name: 'code_execution',\n  inputSchema: codeExecution_20250825InputSchema,\n  outputSchema: codeExecution_20250825OutputSchema,\n});\n\nexport const codeExecution_20250825 = (\n  args: Parameters<typeof factory>[0] = {},\n) => {\n  return factory(args);\n};\n","import { LanguageModelV2FinishReason } from '@ai-sdk/provider';\n\n/**\n * @see https://docs.anthropic.com/en/api/messages#response-stop-reason\n */\nexport function mapAnthropicStopReason({\n  finishReason,\n  isJsonResponseFromTool,\n}: {\n  finishReason: string | null | undefined;\n  isJsonResponseFromTool?: boolean;\n}): LanguageModelV2FinishReason {\n  switch (finishReason) {\n    case 'pause_turn':\n    case 'end_turn':\n    case 'stop_sequence':\n      return 'stop';\n    case 'refusal':\n      return 'content-filter';\n    case 'tool_use':\n      return isJsonResponseFromTool ? 'stop' : 'tool-calls';\n    case 'max_tokens':\n      return 'length';\n    default:\n      return 'unknown';\n  }\n}\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nconst bash_20241022InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      command: z.string(),\n      restart: z.boolean().optional(),\n    }),\n  ),\n);\n\nexport const bash_20241022 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The bash command to run. Required unless the tool is being restarted.\n     */\n    command: string;\n\n    /**\n     * Specifying true will restart this tool. Otherwise, leave this unspecified.\n     */\n    restart?: boolean;\n  },\n  {}\n>({\n  id: 'anthropic.bash_20241022',\n  name: 'bash',\n  inputSchema: bash_20241022InputSchema,\n});\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nconst bash_20250124InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      command: z.string(),\n      restart: z.boolean().optional(),\n    }),\n  ),\n);\n\nexport const bash_20250124 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The bash command to run. Required unless the tool is being restarted.\n     */\n    command: string;\n\n    /**\n     * Specifying true will restart this tool. Otherwise, leave this unspecified.\n     */\n    restart?: boolean;\n  },\n  {}\n>({\n  id: 'anthropic.bash_20250124',\n  name: 'bash',\n  inputSchema: bash_20250124InputSchema,\n});\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nconst computer_20241022InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      action: z.enum([\n        'key',\n        'type',\n        'mouse_move',\n        'left_click',\n        'left_click_drag',\n        'right_click',\n        'middle_click',\n        'double_click',\n        'screenshot',\n        'cursor_position',\n      ]),\n      coordinate: z.array(z.number().int()).optional(),\n      text: z.string().optional(),\n    }),\n  ),\n);\n\nexport const computer_20241022 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The action to perform. The available actions are:\n     * - `key`: Press a key or key-combination on the keyboard.\n     *   - This supports xdotool's `key` syntax.\n     *   - Examples: \"a\", \"Return\", \"alt+Tab\", \"ctrl+s\", \"Up\", \"KP_0\" (for the numpad 0 key).\n     * - `type`: Type a string of text on the keyboard.\n     * - `cursor_position`: Get the current (x, y) pixel coordinate of the cursor on the screen.\n     * - `mouse_move`: Move the cursor to a specified (x, y) pixel coordinate on the screen.\n     * - `left_click`: Click the left mouse button.\n     * - `left_click_drag`: Click and drag the cursor to a specified (x, y) pixel coordinate on the screen.\n     * - `right_click`: Click the right mouse button.\n     * - `middle_click`: Click the middle mouse button.\n     * - `double_click`: Double-click the left mouse button.\n     * - `screenshot`: Take a screenshot of the screen.\n     */\n    action:\n      | 'key'\n      | 'type'\n      | 'mouse_move'\n      | 'left_click'\n      | 'left_click_drag'\n      | 'right_click'\n      | 'middle_click'\n      | 'double_click'\n      | 'screenshot'\n      | 'cursor_position';\n\n    /**\n     * (x, y): The x (pixels from the left edge) and y (pixels from the top edge) coordinates to move the mouse to. Required only by `action=mouse_move` and `action=left_click_drag`.\n     */\n    coordinate?: number[];\n\n    /**\n     * Required only by `action=type` and `action=key`.\n     */\n    text?: string;\n  },\n  {\n    /**\n     * The width of the display being controlled by the model in pixels.\n     */\n    displayWidthPx: number;\n\n    /**\n     * The height of the display being controlled by the model in pixels.\n     */\n    displayHeightPx: number;\n\n    /**\n     * The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n     */\n    displayNumber?: number;\n  }\n>({\n  id: 'anthropic.computer_20241022',\n  name: 'computer',\n  inputSchema: computer_20241022InputSchema,\n});\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nconst computer_20250124InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      action: z.enum([\n        'key',\n        'hold_key',\n        'type',\n        'cursor_position',\n        'mouse_move',\n        'left_mouse_down',\n        'left_mouse_up',\n        'left_click',\n        'left_click_drag',\n        'right_click',\n        'middle_click',\n        'double_click',\n        'triple_click',\n        'scroll',\n        'wait',\n        'screenshot',\n      ]),\n      coordinate: z.tuple([z.number().int(), z.number().int()]).optional(),\n      duration: z.number().optional(),\n      scroll_amount: z.number().optional(),\n      scroll_direction: z.enum(['up', 'down', 'left', 'right']).optional(),\n      start_coordinate: z\n        .tuple([z.number().int(), z.number().int()])\n        .optional(),\n      text: z.string().optional(),\n    }),\n  ),\n);\n\nexport const computer_20250124 = createProviderDefinedToolFactory<\n  {\n    /**\n     * - `key`: Press a key or key-combination on the keyboard.\n     *   - This supports xdotool's `key` syntax.\n     *   - Examples: \"a\", \"Return\", \"alt+Tab\", \"ctrl+s\", \"Up\", \"KP_0\" (for the numpad 0 key).\n     * - `hold_key`: Hold down a key or multiple keys for a specified duration (in seconds). Supports the same syntax as `key`.\n     * - `type`: Type a string of text on the keyboard.\n     * - `cursor_position`: Get the current (x, y) pixel coordinate of the cursor on the screen.\n     * - `mouse_move`: Move the cursor to a specified (x, y) pixel coordinate on the screen.\n     * - `left_mouse_down`: Press the left mouse button.\n     * - `left_mouse_up`: Release the left mouse button.\n     * - `left_click`: Click the left mouse button at the specified (x, y) pixel coordinate on the screen. You can also include a key combination to hold down while clicking using the `text` parameter.\n     * - `left_click_drag`: Click and drag the cursor from `start_coordinate` to a specified (x, y) pixel coordinate on the screen.\n     * - `right_click`: Click the right mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `middle_click`: Click the middle mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `double_click`: Double-click the left mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `triple_click`: Triple-click the left mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `scroll`: Scroll the screen in a specified direction by a specified amount of clicks of the scroll wheel, at the specified (x, y) pixel coordinate. DO NOT use PageUp/PageDown to scroll.\n     * - `wait`: Wait for a specified duration (in seconds).\n     * - `screenshot`: Take a screenshot of the screen.\n     */\n    action:\n      | 'key'\n      | 'hold_key'\n      | 'type'\n      | 'cursor_position'\n      | 'mouse_move'\n      | 'left_mouse_down'\n      | 'left_mouse_up'\n      | 'left_click'\n      | 'left_click_drag'\n      | 'right_click'\n      | 'middle_click'\n      | 'double_click'\n      | 'triple_click'\n      | 'scroll'\n      | 'wait'\n      | 'screenshot';\n\n    /**\n     * (x, y): The x (pixels from the left edge) and y (pixels from the top edge) coordinates to move the mouse to. Required only by `action=mouse_move` and `action=left_click_drag`.\n     */\n    coordinate?: [number, number];\n\n    /**\n     * The duration to hold the key down for. Required only by `action=hold_key` and `action=wait`.\n     */\n    duration?: number;\n\n    /**\n     * The number of 'clicks' to scroll. Required only by `action=scroll`.\n     */\n    scroll_amount?: number;\n\n    /**\n     * The direction to scroll the screen. Required only by `action=scroll`.\n     */\n    scroll_direction?: 'up' | 'down' | 'left' | 'right';\n\n    /**\n     * (x, y): The x (pixels from the left edge) and y (pixels from the top edge) coordinates to start the drag from. Required only by `action=left_click_drag`.\n     */\n    start_coordinate?: [number, number];\n\n    /**\n     * Required only by `action=type`, `action=key`, and `action=hold_key`. Can also be used by click or scroll actions to hold down keys while clicking or scrolling.\n     */\n    text?: string;\n  },\n  {\n    /**\n     * The width of the display being controlled by the model in pixels.\n     */\n    displayWidthPx: number;\n\n    /**\n     * The height of the display being controlled by the model in pixels.\n     */\n    displayHeightPx: number;\n\n    /**\n     * The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n     */\n    displayNumber?: number;\n  }\n>({\n  id: 'anthropic.computer_20250124',\n  name: 'computer',\n  inputSchema: computer_20250124InputSchema,\n});\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nconst memory_20250818InputSchema = lazySchema(() =>\n  zodSchema(\n    z.discriminatedUnion('command', [\n      z.object({\n        command: z.literal('view'),\n        path: z.string(),\n        view_range: z.tuple([z.number(), z.number()]).optional(),\n      }),\n      z.object({\n        command: z.literal('create'),\n        path: z.string(),\n        file_text: z.string(),\n      }),\n      z.object({\n        command: z.literal('str_replace'),\n        path: z.string(),\n        old_str: z.string(),\n        new_str: z.string(),\n      }),\n      z.object({\n        command: z.literal('insert'),\n        path: z.string(),\n        insert_line: z.number(),\n        insert_text: z.string(),\n      }),\n      z.object({\n        command: z.literal('delete'),\n        path: z.string(),\n      }),\n      z.object({\n        command: z.literal('rename'),\n        old_path: z.string(),\n        new_path: z.string(),\n      }),\n    ]),\n  ),\n);\n\nexport const memory_20250818 = createProviderDefinedToolFactory<\n  | { command: 'view'; path: string; view_range?: [number, number] }\n  | { command: 'create'; path: string; file_text: string }\n  | { command: 'str_replace'; path: string; old_str: string; new_str: string }\n  | {\n      command: 'insert';\n      path: string;\n      insert_line: number;\n      insert_text: string;\n    }\n  | { command: 'delete'; path: string }\n  | { command: 'rename'; old_path: string; new_path: string },\n  {}\n>({\n  id: 'anthropic.memory_20250818',\n  name: 'memory',\n  inputSchema: memory_20250818InputSchema,\n});\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nconst textEditor_20241022InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      command: z.enum(['view', 'create', 'str_replace', 'insert', 'undo_edit']),\n      path: z.string(),\n      file_text: z.string().optional(),\n      insert_line: z.number().int().optional(),\n      new_str: z.string().optional(),\n      old_str: z.string().optional(),\n      view_range: z.array(z.number().int()).optional(),\n    }),\n  ),\n);\n\nexport const textEditor_20241022 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`, `undo_edit`.\n     */\n    command: 'view' | 'create' | 'str_replace' | 'insert' | 'undo_edit';\n\n    /**\n     * Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.\n     */\n    path: string;\n\n    /**\n     * Required parameter of `create` command, with the content of the file to be created.\n     */\n    file_text?: string;\n\n    /**\n     * Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.\n     */\n    insert_line?: number;\n\n    /**\n     * Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.\n     */\n    new_str?: string;\n\n    /**\n     * Required parameter of `str_replace` command containing the string in `path` to replace.\n     */\n    old_str?: string;\n\n    /**\n     * Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.\n     */\n    view_range?: number[];\n  },\n  {}\n>({\n  id: 'anthropic.text_editor_20241022',\n  name: 'str_replace_editor',\n  inputSchema: textEditor_20241022InputSchema,\n});\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nconst textEditor_20250124InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      command: z.enum(['view', 'create', 'str_replace', 'insert', 'undo_edit']),\n      path: z.string(),\n      file_text: z.string().optional(),\n      insert_line: z.number().int().optional(),\n      new_str: z.string().optional(),\n      old_str: z.string().optional(),\n      view_range: z.array(z.number().int()).optional(),\n    }),\n  ),\n);\n\nexport const textEditor_20250124 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`, `undo_edit`.\n     */\n    command: 'view' | 'create' | 'str_replace' | 'insert' | 'undo_edit';\n\n    /**\n     * Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.\n     */\n    path: string;\n\n    /**\n     * Required parameter of `create` command, with the content of the file to be created.\n     */\n    file_text?: string;\n\n    /**\n     * Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.\n     */\n    insert_line?: number;\n\n    /**\n     * Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.\n     */\n    new_str?: string;\n\n    /**\n     * Required parameter of `str_replace` command containing the string in `path` to replace.\n     */\n    old_str?: string;\n\n    /**\n     * Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.\n     */\n    view_range?: number[];\n  },\n  {}\n>({\n  id: 'anthropic.text_editor_20250124',\n  name: 'str_replace_editor',\n  inputSchema: textEditor_20250124InputSchema,\n});\n","import {\n  createProviderDefinedToolFactory,\n  lazySchema,\n  zodSchema,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nconst textEditor_20250429InputSchema = lazySchema(() =>\n  zodSchema(\n    z.object({\n      command: z.enum(['view', 'create', 'str_replace', 'insert']),\n      path: z.string(),\n      file_text: z.string().optional(),\n      insert_line: z.number().int().optional(),\n      new_str: z.string().optional(),\n      old_str: z.string().optional(),\n      view_range: z.array(z.number().int()).optional(),\n    }),\n  ),\n);\n\nexport const textEditor_20250429 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`.\n     * Note: `undo_edit` is not supported in Claude 4 models.\n     */\n    command: 'view' | 'create' | 'str_replace' | 'insert';\n\n    /**\n     * Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.\n     */\n    path: string;\n\n    /**\n     * Required parameter of `create` command, with the content of the file to be created.\n     */\n    file_text?: string;\n\n    /**\n     * Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.\n     */\n    insert_line?: number;\n\n    /**\n     * Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.\n     */\n    new_str?: string;\n\n    /**\n     * Required parameter of `str_replace` command containing the string in `path` to replace.\n     */\n    old_str?: string;\n\n    /**\n     * Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.\n     */\n    view_range?: number[];\n  },\n  {}\n>({\n  id: 'anthropic.text_editor_20250429',\n  name: 'str_replace_based_edit_tool',\n  inputSchema: textEditor_20250429InputSchema,\n});\n","import { bash_20241022 } from './tool/bash_20241022';\nimport { bash_20250124 } from './tool/bash_20250124';\nimport { codeExecution_20250522 } from './tool/code-execution_20250522';\nimport { codeExecution_20250825 } from './tool/code-execution_20250825';\nimport { computer_20241022 } from './tool/computer_20241022';\nimport { computer_20250124 } from './tool/computer_20250124';\nimport { memory_20250818 } from './tool/memory_20250818';\nimport { textEditor_20241022 } from './tool/text-editor_20241022';\nimport { textEditor_20250124 } from './tool/text-editor_20250124';\nimport { textEditor_20250429 } from './tool/text-editor_20250429';\nimport { textEditor_20250728 } from './tool/text-editor_20250728';\nimport { webFetch_20250910 } from './tool/web-fetch-20250910';\nimport { webSearch_20250305 } from './tool/web-search_20250305';\n\nexport const anthropicTools = {\n  /**\n   * The bash tool enables Claude to execute shell commands in a persistent bash session,\n   * allowing system operations, script execution, and command-line automation.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `bash`.\n   */\n  bash_20241022,\n\n  /**\n   * The bash tool enables Claude to execute shell commands in a persistent bash session,\n   * allowing system operations, script execution, and command-line automation.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `bash`.\n   */\n  bash_20250124,\n\n  /**\n   * Claude can analyze data, create visualizations, perform complex calculations,\n   * run system commands, create and edit files, and process uploaded files directly within\n   * the API conversation.\n   *\n   * The code execution tool allows Claude to run Bash commands and manipulate files,\n   * including writing code, in a secure, sandboxed environment.\n   *\n   * Tool name must be `code_execution`.\n   */\n  codeExecution_20250522,\n\n  /**\n   * Claude can analyze data, create visualizations, perform complex calculations,\n   * run system commands, create and edit files, and process uploaded files directly within\n   * the API conversation.\n   *\n   * The code execution tool allows Claude to run both Python and Bash commands and manipulate files,\n   * including writing code, in a secure, sandboxed environment.\n   *\n   * This is the latest version with enhanced Bash support and file operations.\n   *\n   * Tool name must be `code_execution`.\n   */\n  codeExecution_20250825,\n\n  /**\n   * Claude can interact with computer environments through the computer use tool, which\n   * provides screenshot capabilities and mouse/keyboard control for autonomous desktop interaction.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `computer`.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   */\n  computer_20241022,\n\n  /**\n   * Claude can interact with computer environments through the computer use tool, which\n   * provides screenshot capabilities and mouse/keyboard control for autonomous desktop interaction.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `computer`.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   */\n  computer_20250124,\n\n  /**\n   * The memory tool enables Claude to store and retrieve information across conversations through a memory file directory.\n   * Claude can create, read, update, and delete files that persist between sessions,\n   * allowing it to build knowledge over time without keeping everything in the context window.\n   * The memory tool operates client-side—you control where and how the data is stored through your own infrastructure.\n   *\n   * Supported models: Claude Sonnet 4.5, Claude Sonnet 4, Claude Opus 4.1, Claude Opus 4.\n   *\n   * Tool name must be `memory`.\n   */\n  memory_20250818,\n\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Supported models: Claude Sonnet 3.5\n   *\n   * Tool name must be `str_replace_editor`.\n   */\n  textEditor_20241022,\n\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Supported models: Claude Sonnet 3.7\n   *\n   * Tool name must be `str_replace_editor`.\n   */\n  textEditor_20250124,\n\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Note: This version does not support the \"undo_edit\" command.\n   *\n   * Tool name must be `str_replace_based_edit_tool`.\n   *\n   * @deprecated Use textEditor_20250728 instead\n   */\n  textEditor_20250429,\n\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Note: This version does not support the \"undo_edit\" command and adds optional max_characters parameter.\n   *\n   * Supported models: Claude Sonnet 4, Opus 4, and Opus 4.1\n   *\n   * Tool name must be `str_replace_based_edit_tool`.\n   *\n   * @param maxCharacters - Optional maximum number of characters to view in the file\n   */\n  textEditor_20250728,\n\n  /**\n   * Creates a web fetch tool that gives Claude direct access to real-time web content.\n   *\n   * Tool name must be `web_fetch`.\n   *\n   * @param maxUses - The max_uses parameter limits the number of web fetches performed\n   * @param allowedDomains - Only fetch from these domains\n   * @param blockedDomains - Never fetch from these domains\n   * @param citations - Unlike web search where citations are always enabled, citations are optional for web fetch. Set \"citations\": {\"enabled\": true} to enable Claude to cite specific passages from fetched documents.\n   * @param maxContentTokens - The max_content_tokens parameter limits the amount of content that will be included in the context.\n   */\n  webFetch_20250910,\n\n  /**\n   * Creates a web search tool that gives Claude direct access to real-time web content.\n   *\n   * Tool name must be `web_search`.\n   *\n   * @param maxUses - Maximum number of web searches Claude can perform during the conversation.\n   * @param allowedDomains - Optional list of domains that Claude is allowed to search.\n   * @param blockedDomains - Optional list of domains that Claude should avoid when searching.\n   * @param userLocation - Optional user location information to provide geographically relevant search results.\n   */\n  webSearch_20250305,\n};\n"],"mappings":"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","names":["import_provider","import_provider_utils","import_provider_utils","import_v4","import_v4","import_provider_utils","import_v4","import_provider_utils","import_v4","factory","import_provider_utils","import_v4","factory","import_provider_utils","anthropicTools","import_provider","import_provider_utils","import_provider_utils","import_v4","factory","import_provider_utils","import_v4","factory","_a","_b","i","generateId","anthropicTools","_a","import_provider_utils","import_v4","import_provider_utils","import_v4","import_provider_utils","import_v4","import_provider_utils","import_v4","import_provider_utils","import_v4","import_provider_utils","import_v4","import_provider_utils","import_v4","import_provider_utils","import_v4"]}