import { MastraVector } from '@mastra/core/vector';
import type { IndexStats, QueryResult, QueryVectorParams, CreateIndexParams, UpsertVectorParams, DescribeIndexParams, DeleteIndexParams, DeleteVectorParams, UpdateVectorParams } from '@mastra/core/vector';
import type { LibSQLVectorFilter } from './filter.js';
interface LibSQLQueryVectorParams extends QueryVectorParams<LibSQLVectorFilter> {
    minScore?: number;
}
export interface LibSQLVectorConfig {
    connectionUrl: string;
    authToken?: string;
    syncUrl?: string;
    syncInterval?: number;
    /**
     * Maximum number of retries for write operations if an SQLITE_BUSY error occurs.
     * @default 5
     */
    maxRetries?: number;
    /**
     * Initial backoff time in milliseconds for retrying write operations on SQLITE_BUSY.
     * The backoff time will double with each retry (exponential backoff).
     * @default 100
     */
    initialBackoffMs?: number;
}
export declare class LibSQLVector extends MastraVector<LibSQLVectorFilter> {
    private turso;
    private readonly maxRetries;
    private readonly initialBackoffMs;
    constructor({ connectionUrl, authToken, syncUrl, syncInterval, maxRetries, initialBackoffMs, }: LibSQLVectorConfig);
    private executeWriteOperationWithRetry;
    transformFilter(filter?: LibSQLVectorFilter): LibSQLVectorFilter;
    query({ indexName, queryVector, topK, filter, includeVector, minScore, }: LibSQLQueryVectorParams): Promise<QueryResult[]>;
    upsert(args: UpsertVectorParams): Promise<string[]>;
    private doUpsert;
    createIndex(args: CreateIndexParams): Promise<void>;
    private doCreateIndex;
    deleteIndex(args: DeleteIndexParams): Promise<void>;
    private doDeleteIndex;
    listIndexes(): Promise<string[]>;
    /**
     * Retrieves statistics about a vector index.
     *
     * @param {string} indexName - The name of the index to describe
     * @returns A promise that resolves to the index statistics including dimension, count and metric
     */
    describeIndex({ indexName }: DescribeIndexParams): Promise<IndexStats>;
    /**
     * Updates a vector by its ID with the provided vector and/or metadata.
     *
     * @param indexName - The name of the index containing the vector.
     * @param id - The ID of the vector to update.
     * @param update - An object containing the vector and/or metadata to update.
     * @param update.vector - An optional array of numbers representing the new vector.
     * @param update.metadata - An optional record containing the new metadata.
     * @returns A promise that resolves when the update is complete.
     * @throws Will throw an error if no updates are provided or if the update operation fails.
     */
    updateVector(args: UpdateVectorParams): Promise<void>;
    private doUpdateVector;
    /**
     * Deletes a vector by its ID.
     * @param indexName - The name of the index containing the vector.
     * @param id - The ID of the vector to delete.
     * @returns A promise that resolves when the deletion is complete.
     * @throws Will throw an error if the deletion operation fails.
     */
    deleteVector(args: DeleteVectorParams): Promise<void>;
    private doDeleteVector;
    truncateIndex(args: DeleteIndexParams): Promise<void>;
    private _doTruncateIndex;
}
export {};
//# sourceMappingURL=index.d.ts.map